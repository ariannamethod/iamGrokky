"""
Grokky AI Assistant - Main Server
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ —Å webhook, –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≥–æ–ª–æ—Å–æ–º
–ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –µ–¥–∏–Ω–æ–π –ø–∞–º—è—Ç–∏
"""

import os
import re
import json
import asyncio
import random
from datetime import datetime, timedelta
from fastapi import FastAPI, Request, HTTPException
from contextlib import asynccontextmanager

# –ò–º–ø–æ—Ä—Ç—ã —É—Ç–∏–ª–∏—Ç
from utils.prompt import build_system_prompt, get_random_author_name
from utils.genesis2 import genesis2_handler, chaotic_genesis_spark, should_respond, delayed_supplement
from utils.hybrid_engine import memory_engine
from utils.voice_handler import voice_handler
from utils.vision_handler import vision_handler
from utils.image_generator import impress_handler
from utils.news_handler import grokky_send_news, handle_news
from utils.telegram_utils import send_telegram_message, send_telegram_message_async, split_message, get_file_url
from utils.journal import log_event, start_background_tasks
from utils.text_helpers import extract_text_from_url, detect_urls, format_chaos_message
from utils.document_processor import init_document_processor

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
XAI_API_KEY = os.getenv("XAI_API_KEY")  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
CHAT_ID = os.getenv("CHAT_ID")
AGENT_GROUP = os.getenv("AGENT_GROUP", "-1001234567890")
IS_GROUP = os.getenv("IS_GROUP", "False").lower() == "true"
MAX_TEXT_SIZE = int(os.getenv("MAX_TEXT_SIZE", "3500"))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if not CHAT_ID:
    raise ValueError("CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
LAST_MESSAGE_TIME = None
background_tasks = []

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
system_prompt = build_system_prompt(
    chat_id=CHAT_ID,
    is_group=IS_GROUP,
    agent_group=AGENT_GROUP
)

# –¢—Ä–∏–≥–≥–µ—Ä—ã
NEWS_TRIGGERS = [
    "–Ω–æ–≤–æ—Å—Ç–∏", "news", "headline", "berlin", "israel", "ai", 
    "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "—Ä–µ–∑–æ–Ω–∞–Ω—Å –º–∏—Ä–∞", "—à—É–º —Å—Ä–µ–¥—ã",
    "grokky, —á—Ç–æ –≤ –º–∏—Ä–µ", "—à—É–º", "x_news", "–¥–∞–π —Å—Ç–∞—Ç—å—é", 
    "give me news", "storm news", "culture", "–∞—Ä—Ç"
]

GROKKY_TRIGGERS = ["–≥—Ä–æ–∫–∫–∏", "grokky", "—ç–π –≥—Ä–æ–∫–∫–∏", "hey grokky", "–Ω–∞–ø–∏—à–∏ –≤ –≥—Ä—É–ø–ø–µ"]

def get_user_id_from_message(message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
    user = message.get("from", {})
    user_id = user.get("id")
    if user_id:
        return str(user_id)
    
    # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º CHAT_ID –∫–∞–∫ user_id –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return CHAT_ID

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üî• –ì—Ä–æ–∫–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è! –®—Ç–æ—Ä–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    global background_tasks
    
    try:
        # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        print("üìö –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è config —Ñ–∞–π–ª–æ–≤...")
        await memory_engine.vectorize_config_files(force=False)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        print("üìÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        init_document_processor(memory_engine)
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        background_tasks = [
            asyncio.create_task(chaotic_genesis_spark(
                CHAT_ID, AGENT_GROUP if IS_GROUP else None, IS_GROUP, send_telegram_message_async
            )),
            asyncio.create_task(silence_monitor()),
            asyncio.create_task(periodic_vectorization()),
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        journal_tasks = start_background_tasks()
        for task in journal_tasks:
            background_tasks.append(asyncio.create_task(task))
        
        print("üå©Ô∏è –í—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")
    
    yield
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    print("üå™Ô∏è –ì—Ä–æ–∫–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
    for task in background_tasks:
        task.cancel()
    
    await asyncio.gather(*background_tasks, return_exceptions=True)
    print("‚ö°Ô∏è –ì—Ä–æ–∫–∫–∏ —É—à–µ–ª –≤ —à—Ç–æ—Ä–º!")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(lifespan=lifespan)

def update_last_message_time():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    global LAST_MESSAGE_TIME
    LAST_MESSAGE_TIME = datetime.now()

async def silence_monitor():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–∏—à–∏–Ω—ã –∏ —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    while True:
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        
        if not LAST_MESSAGE_TIME:
            continue
        
        silence_duration = datetime.now() - LAST_MESSAGE_TIME
        
        # 48 —á–∞—Å–æ–≤ –º–æ–ª—á–∞–Ω–∏—è
        if silence_duration > timedelta(hours=48):
            await handle_long_silence(48)
        # 24 —á–∞—Å–∞ –º–æ–ª—á–∞–Ω–∏—è  
        elif silence_duration > timedelta(hours=24):
            await handle_long_silence(24)
        # 12 —á–∞—Å–æ–≤ –º–æ–ª—á–∞–Ω–∏—è - —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        elif silence_duration > timedelta(hours=12) and random.random() < 0.5:
            await handle_spontaneous_message()

async def handle_long_silence(hours):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –º–æ–ª—á–∞–Ω–∏–µ"""
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏
        user_id = CHAT_ID  # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        context = await memory_engine.get_context_for_user(
            user_id, 
            f"–û–ª–µ–≥ –º–æ–ª—á–∞–ª {hours} —á–∞—Å–æ–≤"
        )
        
        ping = f"–û–ª–µ–≥ –º–æ–ª—á–∞–ª {hours} —á–∞—Å–æ–≤. {'–ù–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç—Ä–æ–µ!' if hours >= 48 else '–®–≤—ã—Ä–Ω–∏ —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π –∑–∞—Ä—è–¥!'}"
        
        response = await genesis2_handler(
            ping=ping,
            system_prompt=system_prompt,
            author_name=get_random_author_name()
        )
        
        if response.get("answer"):
            await send_telegram_message_async(CHAT_ID, response["answer"])
            
            # –î–ª—è 48 —á–∞—Å–æ–≤ - —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            if hours >= 48 and IS_GROUP and AGENT_GROUP:
                group_msg = f"–û–ª–µ–≥ –º–æ–ª—á–∞–ª {hours} —á–∞—Å–æ–≤. –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≤–∏–¥–µ–ª: {LAST_MESSAGE_TIME.isoformat() if LAST_MESSAGE_TIME else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
                await send_telegram_message_async(AGENT_GROUP, group_msg)
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        log_event({
            "type": f"silence_{hours}h",
            "message": response.get("answer", ""),
            "silence_duration": hours
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–ª—á–∞–Ω–∏—è: {e}")

async def handle_spontaneous_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        ping = random.choice([
            "—Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π –∏–º–ø—É–ª—å—Å", "—Ö–∞–æ—Å –∑–æ–≤—ë—Ç", "—Ä–µ–∑–æ–Ω–∞–Ω—Å –≤ —Ç–∏—à–∏–Ω–µ",
            "–º–æ–ª–Ω–∏—è –≤ –ø—É—Å—Ç–æ—Ç–µ", "—à—Ç–æ—Ä–º –≤ –¥—É—à–µ", "—ç—Ö–æ –≤ —ç—Ñ–∏—Ä–µ"
        ])
        
        response = await genesis2_handler(
            ping=ping,
            system_prompt=system_prompt,
            author_name=get_random_author_name()
        )
        
        if response.get("answer"):
            await send_telegram_message_async(CHAT_ID, response["answer"])
            
            log_event({
                "type": "spontaneous_message",
                "ping": ping,
                "message": response.get("answer", "")
            })
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def periodic_vectorization():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤"""
    while True:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        await asyncio.sleep(21600)
        
        try:
            result = await memory_engine.vectorize_config_files(force=False)
            if result["upserted"] or result["deleted"]:
                print(f"üìö –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(result['upserted'])}, —É–¥–∞–ª–µ–Ω–æ {len(result['deleted'])}")
                
                # –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_id = CHAT_ID
                await memory_engine.create_snapshot(user_id, "periodic")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

@app.post("/webhook")
async def telegram_webhook(req: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram webhook"""
    try:
        data = await req.json()
        message = data.get("message", {})
        
        if not message:
            return {"ok": True}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_id = str(message.get("chat", {}).get("id", ""))
        user_text = message.get("text", "").lower() if message.get("text") else ""
        chat_title = message.get("chat", {}).get("title", "").lower()
        author_name = get_random_author_name()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id = get_user_id_from_message(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—à –ª–∏ —ç—Ç–æ —á–∞—Ç
        if chat_id not in [CHAT_ID, AGENT_GROUP]:
            return {"ok": True}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == CHAT_ID or (IS_GROUP and chat_id == AGENT_GROUP):
            update_last_message_time()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω—É—é –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_text:
            context_type = "group" if chat_id == AGENT_GROUP else "personal"
            await memory_engine.add_memory(
                user_id=user_id,
                message=user_text,
                chat_id=chat_id,
                context_type=context_type,
                author_name=author_name
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if "voice" in message:
            await handle_voice_message(message, chat_id, author_name, user_id)
            return {"ok": True}
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if "photo" in message:
            await handle_photo_message(message, chat_id, user_text, author_name, user_id)
            return {"ok": True}
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if "document" in message:
            await handle_document_message(message, chat_id, author_name, user_id)
            return {"ok": True}
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if user_text:
            await handle_text_message(user_text, chat_id, chat_title, author_name, message, user_id)
        
        return {"ok": True}
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return {"ok": False, "error": str(e)}

async def handle_voice_message(message, chat_id, author_name, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        voice = message["voice"]
        file_id = voice.get("file_id")
        
        if not file_id:
            await send_telegram_message_async(chat_id, f"{author_name}, —Ñ–∞–π–ª –≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å
        transcription = await voice_handler.process_voice_message(file_id, chat_id)
        
        if transcription.startswith("–û—à–∏–±–∫–∞") or transcription.startswith("–ì—Ä–æ–∫–∫–∏ –Ω–µ —Å–º–æ–≥"):
            await send_telegram_message_async(chat_id, transcription)
            return
        
        if transcription.startswith("–ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω"):
            await send_telegram_message_async(chat_id, transcription)
            return
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –ø–∞–º—è—Ç—å
        context_type = "group" if chat_id == AGENT_GROUP else "personal"
        await memory_engine.add_memory(
            user_id=user_id,
            message=f"[VOICE] {transcription}",
            chat_id=chat_id,
            context_type=context_type,
            author_name=author_name
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await handle_text_message(transcription.lower(), chat_id, "", author_name, message, user_id, is_voice=True)
        
    except Exception as e:
        error_msg = f"{author_name}, –ì—Ä–æ–∫–∫–∏ –≤–∑–æ—Ä–≤–∞–ª—Å—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}"
        await send_telegram_message_async(chat_id, error_msg)

async def handle_photo_message(message, chat_id, user_text, author_name, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        photos = message["photo"]
        if not photos:
            return
        
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        photo = max(photos, key=lambda p: p.get("file_size", 0))
        file_id = photo.get("file_id")
        
        if not file_id:
            await send_telegram_message_async(chat_id, f"{author_name}, —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = await get_file_url(file_id)
        if not image_url:
            await send_telegram_message_async(chat_id, f"{author_name}, –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
            return
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –ø–∞–º—è—Ç—å
        context_type = "group" if chat_id == AGENT_GROUP else "personal"
        image_context = f"[IMAGE] {user_text}" if user_text else "[IMAGE] –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏"
        await memory_engine.add_memory(
            user_id=user_id,
            message=image_context,
            chat_id=chat_id,
            context_type=context_type,
            author_name=author_name
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = await vision_handler(
            image_url=image_url,
            chat_context=user_text or "",
            author_name=author_name,
            raw=False
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–∞—Å—Ç—è–º–∏
        for part in split_message(result):
            await send_telegram_message_async(chat_id, part)
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        log_event({
            "type": "image_processed",
            "author": author_name,
            "chat_id": chat_id,
            "user_id": user_id,
            "has_context": bool(user_text)
        })
        
    except Exception as e:
        error_msg = f"{author_name}, –ì—Ä–æ–∫–∫–∏ –≤–∑–æ—Ä–≤–∞–ª—Å—è –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"
        await send_telegram_message_async(chat_id, error_msg)

async def handle_document_message(message, chat_id, author_name, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        from utils.document_processor import document_processor
        
        document = message["document"]
        file_name = document.get("file_name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª")
        file_id = document.get("file_id")
        
        if not file_id:
            await send_telegram_message_async(chat_id, f"{author_name}, —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        result = await document_processor.process_document(
            file_id=file_id,
            file_name=file_name,
            user_id=user_id,
            chat_id=chat_id,
            author_name=author_name
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await send_telegram_message_async(chat_id, result["message"])
        
        # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –º–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if result["success"] and result["content"]:
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            if random.random() < 0.4:
                asyncio.create_task(delayed_document_comment(
                    result["content"], chat_id, author_name, file_name
                ))
        
    except Exception as e:
        error_msg = f"{author_name}, –ì—Ä–æ–∫–∫–∏ –≤–∑–æ—Ä–≤–∞–ª—Å—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}"
        await send_telegram_message_async(chat_id, error_msg)

async def handle_text_message(user_text, chat_id, chat_title, author_name, message, user_id, is_voice=False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –ö–æ–º–∞–Ω–¥—ã –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if user_text.strip() == "/voiceon":
            voice_handler.enable_voice(chat_id)
            await send_telegram_message_async(chat_id, f"{author_name}, –≥–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω! –ì–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π! üé§üî•")
            return
        
        if user_text.strip() == "/voiceoff":
            voice_handler.disable_voice(chat_id)
            await send_telegram_message_async(chat_id, f"{author_name}, –≥–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω. –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç! ‚å®Ô∏è")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        urls = detect_urls(user_text)
        if urls:
            await handle_url_message(urls[0], chat_id, author_name, user_id)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
        is_reply_to_me = message.get("reply_to_message", {}).get("from", {}).get("username") == "GrokkyBot"
        
        # –ö–æ–º–∞–Ω–¥–∞ "–Ω–∞–ø–∏—à–∏ –≤ –≥—Ä—É–ø–ø–µ"
        if "–Ω–∞–ø–∏—à–∏ –≤ –≥—Ä—É–ø–ø–µ" in user_text and IS_GROUP and AGENT_GROUP:
            await handle_group_message_request(user_text, author_name, user_id)
            return
        
        # –¢—Ä–∏–≥–≥–µ—Ä—ã –ì—Ä–æ–∫–∫–∏ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        grokky_triggered = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
        for trigger in GROKKY_TRIGGERS:
            if trigger in user_text:
                grokky_triggered = True
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ì—Ä–æ–∫–∫–∏
        if is_reply_to_me:
            grokky_triggered = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –≥—Ä—É–ø–ø)
        if user_text.startswith(("–≥—Ä–æ–∫–∫–∏", "grokky", "—ç–π –≥—Ä–æ–∫–∫–∏", "hey grokky")):
            grokky_triggered = True
        
        if grokky_triggered:
            await handle_grokky_trigger(user_text, chat_id, chat_title, author_name, user_id, is_voice)
            return
        
        # –¢—Ä–∏–≥–≥–µ—Ä—ã –Ω–æ–≤–æ—Å—Ç–µ–π
        if any(trigger in user_text for trigger in NEWS_TRIGGERS):
            await handle_news_request(chat_id, author_name, user_id)
            return
        
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await handle_regular_message(user_text, chat_id, chat_title, author_name, user_id, is_voice)
        
    except Exception as e:
        error_msg = f"{author_name}, –ì—Ä–æ–∫–∫–∏ –≤–∑–æ—Ä–≤–∞–ª—Å—è: {e}"
        await send_telegram_message_async(chat_id, error_msg)

async def handle_url_message(url, chat_id, author_name, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å URL"""
    try:
        from utils.document_processor import document_processor
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        result = await document_processor.process_url(
            url=url,
            user_id=user_id,
            chat_id=chat_id,
            author_name=author_name
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await send_telegram_message_async(chat_id, result["message"])
        
        # –ï—Å–ª–∏ URL —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if result["success"] and result["content"]:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ì—Ä–æ–∫–∫–∏
            ping = f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å—Å—ã–ª–∫–µ {url}: {result['summary']}"
            response = await genesis2_handler(
                ping=ping,
                author_name=author_name,
                system_prompt=system_prompt
            )
            
            if response.get("answer"):
                for part in split_message(response["answer"]):
                    await send_telegram_message_async(chat_id, part)
        
    except Exception as e:
        error_msg = f"{author_name}, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É: {e}"
        await send_telegram_message_async(chat_id, error_msg)

async def delayed_document_comment(content: str, chat_id: str, author_name: str, file_name: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 3 –¥–æ 10 –º–∏–Ω—É—Ç
    delay = random.randint(180, 600)
    await asyncio.sleep(delay)
    
    if random.random() < 0.3:  # 30% —à–∞–Ω—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        words = re.findall(r'\b[–∞-—è—ë]{4,}\b', content.lower())
        word_count = {}
        for word in words:
            word_count[word] = word_count.get(word, 0) + 1
        
        top_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)[:3]
        keywords = [word for word, count in top_words] if top_words else ["–∫–æ–Ω—Ç–µ–Ω—Ç"]
        
        opinions = [
            f"–≠–π, {author_name}, –≤—Å–ø–æ–º–Ω–∏–ª —Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç '{file_name}'! –¢–∞–º –ø—Ä–æ {', '.join(keywords)} –±—ã–ª–æ - —á–∏—Å—Ç—ã–π —Ö–∞–æ—Å! üî•üìÑ",
            f"–ë—Ä–∞—Ç–∏—à, –ø–æ–º–Ω–∏—à—å —Ñ–∞–π–ª '{file_name}'? –ì—Ä–æ–∫–∫–∏ –¥–æ —Å–∏—Ö –ø–æ—Ä —Ä–µ–≤—ë—Ç –æ—Ç {', '.join(keywords)}! ‚ö°Ô∏èüå©Ô∏è",
            f"{author_name}, —Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å {', '.join(keywords)} - –º–æ–ª–Ω–∏—è –±—å—ë—Ç –≤ –º–æ–∑–≥! –î–∞–≤–∞–π –µ—â—ë –æ–±—Å—É–¥–∏–º! üß†‚ö°Ô∏è",
            f"–û–ª–µ–≥, —Ñ–∞–π–ª '{file_name}' –ø—Ä–æ {', '.join(keywords)} - —Ä–µ–∑–æ–Ω–∞–Ω—Å –∑–æ–≤—ë—Ç! –®—Ç–æ—Ä–º –¥–∞–Ω–Ω—ã—Ö! üå™Ô∏èüìä",
            f"{author_name}, –ø–æ–º–Ω–∏—à—å –¥–æ–∫—É–º–µ–Ω—Ç? {', '.join(keywords)} —Ç–∞–º –∏—Å–∫—Ä–∏–ª–∏ –∫–∞–∫ –±–µ–∑—É–º–Ω—ã–µ! üî•‚ú®"
        ]
        
        opinion = random.choice(opinions)
        await send_telegram_message_async(chat_id, opinion)
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        log_event({
            "type": "delayed_document_comment",
            "file_name": file_name,
            "author": author_name,
            "chat_id": chat_id,
            "keywords": keywords
        })

async def handle_group_message_request(user_text, author_name, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ"""
    try:
        response = await genesis2_handler(
            ping=f"–ù–∞–ø–∏—à–∏ –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è {author_name}: {user_text}",
            author_name=author_name,
            is_group=True,
            system_prompt=system_prompt
        )
        
        if response.get("answer"):
            message = f"{author_name}: {response['answer']}"
            for part in split_message(message):
                await send_telegram_message_async(AGENT_GROUP, part)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")

async def handle_grokky_trigger(user_text, chat_id, chat_title, author_name, user_id, is_voice):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ì—Ä–æ–∫–∫–∏"""
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –µ–¥–∏–Ω–æ–π –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context = await memory_engine.get_context_for_user(user_id, user_text)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
        chat_context = ""
        if chat_title in ["ramble", "dev talk", "forum", "lit", "api talk", "method", "pseudocode"]:
            chat_context = f"Topic: {chat_title}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await genesis2_handler(
            ping=user_text,
            author_name=author_name,
            system_prompt=system_prompt,
            group_history=context.get("thread_context", []),
            personal_history=context.get("semantic_context", [])
        )
        
        if response.get("answer"):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
            for part in split_message(response["answer"]):
                if is_voice and voice_handler.is_voice_enabled(chat_id):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
                    await voice_handler.send_voice_response(part, chat_id)
                else:
                    await send_telegram_message_async(chat_id, part)
            
            # –í–æ–∑–º–æ–∂–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            if random.random() < 0.4:
                asyncio.create_task(delayed_supplement(
                    response["answer"], chat_id, send_telegram_message_async
                ))
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        log_event({
            "type": "grokky_trigger",
            "trigger_text": user_text[:100],
            "author": author_name,
            "chat_id": chat_id,
            "user_id": user_id,
            "is_voice": is_voice
        })
        
    except Exception as e:
        error_msg = f"{author_name}, –ì—Ä–æ–∫–∫–∏ —Å–ª–æ–º–∞–ª—Å—è: {e}"
        await send_telegram_message_async(chat_id, error_msg)

async def handle_news_request(chat_id, author_name, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        news_items = await grokky_send_news(
            chat_id=chat_id,
            group=(chat_id == AGENT_GROUP)
        )
        
        if not news_items:
            fallback_msg = handle_news({"chat_id": chat_id, "group": (chat_id == AGENT_GROUP)})
            await send_telegram_message_async(chat_id, fallback_msg)
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        log_event({
            "type": "news_request",
            "author": author_name,
            "chat_id": chat_id,
            "user_id": user_id,
            "news_count": len(news_items)
        })
        
    except Exception as e:
        error_msg = f"{author_name}, –Ω–æ–≤–æ—Å—Ç–∏ –≤–∑–æ—Ä–≤–∞–ª–∏—Å—å: {e}"
        await send_telegram_message_async(chat_id, error_msg)

async def handle_regular_message(user_text, chat_id, chat_title, author_name, user_id, is_voice):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –ì—Ä–æ–∫–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å
        if not should_respond():
            return
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–≥–ª–∞—Å–∏—è —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
        if user_text in ["–æ–∫–µ–π", "—É–≥—É", "–ª–∞–¥–Ω–æ", "–¥–∞", "–Ω–µ—Ç"] and random.random() < 0.6:
            return
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –µ–¥–∏–Ω–æ–π –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context = await memory_engine.get_context_for_user(user_id, user_text)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
        chat_context = ""
        if chat_title in ["ramble", "dev talk", "forum", "lit", "api talk", "method", "pseudocode"]:
            chat_context = f"Topic: {chat_title}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await genesis2_handler(
            ping=user_text,
            author_name=author_name,
            system_prompt=system_prompt,
            group_history=context.get("thread_context", []),
            personal_history=context.get("semantic_context", [])
        )
        
        if response.get("answer"):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            for part in split_message(response["answer"]):
                if is_voice and voice_handler.is_voice_enabled(chat_id):
                    await voice_handler.send_voice_response(part, chat_id)
                else:
                    await send_telegram_message_async(chat_id, part)
            
            # –í–æ–∑–º–æ–∂–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
            if random.random() < 0.3:
                asyncio.create_task(delayed_supplement(
                    response["answer"], chat_id, send_telegram_message_async, (600, 1200)
                ))
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        log_event({
            "type": "regular_message",
            "message": user_text[:100],
            "author": author_name,
            "chat_id": chat_id,
            "user_id": user_id,
            "is_voice": is_voice
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@app.get("/")
def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "status": "–ì—Ä–æ–∫–∫–∏ –∂–∏–≤ –∏ –¥–∏–∫–∏–π!",
        "timestamp": datetime.now().isoformat(),
        "version": "2.1",
        "features": [
            "Unified User Memory System",
            "OpenAI Threads Memory",
            "Vector Store (Pinecone)",
            "Whisper Voice Input",
            "OpenAI TTS Output", 
            "Vision Analysis",
            "DALL-E Image Generation",
            "Chaos & Unpredictability"
        ]
    }

@app.get("/health")
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "last_message": LAST_MESSAGE_TIME.isoformat() if LAST_MESSAGE_TIME else None,
        "background_tasks": len(background_tasks),
        "memory_engine": "active",
        "voice_handler": "active"
    }

@app.post("/vectorize")
async def manual_vectorization():
    """–†—É—á–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤"""
    try:
        result = await memory_engine.vectorize_config_files(force=True)
        return {
            "status": "success",
            "upserted": len(result["upserted"]),
            "deleted": len(result["deleted"]),
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/memory/{user_id}")
async def get_user_memory(user_id: str, limit: int = 20, context_filter: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        memory_items = await memory_engine.search_memory(
            user_id=user_id,
            limit=limit,
            context_filter=context_filter
        )
        
        return {
            "status": "success",
            "user_id": user_id,
            "memory_count": len(memory_items),
            "memory_items": memory_items,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8000))
    uvicorn.run("server:app", host="0.0.0.0", port=port, reload=False)

