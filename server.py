import os
import asyncio
import json
from datetime import datetime
import logging
import sys
import traceback

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ChatAction
from aiogram.filters import Command
from aiogram.types import Message
import httpx
from aiohttp import web

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
from utils.vector_engine import VectorGrokkyEngine
from utils.genesis2 import genesis2_handler
from utils.howru import check_silence, update_last_message_time
from utils.mirror import mirror_task
from utils.prompt import build_system_prompt, get_chaos_response
from utils.dayandnight import day_and_night_task

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    sys.exit(1)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è Railway
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "https://grokky-production.up.railway.app")
WEBHOOK_PATH = "/webhook"  # –ü—Ä–æ—Å—Ç–æ /webhook –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = os.getenv("WEBAPP_HOST", "0.0.0.0")
WEBAPP_PORT = int(os.getenv("PORT", 8080))
CHAT_ID = os.getenv("CHAT_ID")
AGENT_GROUP = os.getenv("AGENT_GROUP")

# –ö–ª—é—á OpenAI –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π API
XAI_API_KEY = os.getenv("XAI_API_KEY")
PINECONE_API_KEY = os.getenv("PINECONE_API_KEY")
PINECONE_INDEX = os.getenv("PINECONE_INDEX")

logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook –Ω–∞ {WEBHOOK_URL}")
logger.info(
    "–¢–æ–∫–µ–Ω –±–æ—Ç–∞: %s...%s",
    TELEGRAM_BOT_TOKEN[:5],
    TELEGRAM_BOT_TOKEN[-5:],
)
logger.info("XAI API –∫–ª—é—á: %s", "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if XAI_API_KEY else "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
logger.info("OpenAI API –∫–ª—é—á: %s", "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if OPENAI_API_KEY else "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
logger.info(
    "Pinecone API –∫–ª—é—á: %s",
    "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if PINECONE_API_KEY else "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù",
)
logger.info("Pinecone –∏–Ω–¥–µ–∫—Å: %s", PINECONE_INDEX or "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ, –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
BOT_ID = None
BOT_USERNAME = ""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
try:
    engine = VectorGrokkyEngine()
    logger.info("VectorGrokkyEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VectorGrokkyEngine: {e}")
    logger.error(traceback.format_exc())
    engine = None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
VOICE_ENABLED = {}


async def synth_voice(text: str, lang: str = "ru") -> bytes:
    """Synthesize speech using OpenAI's TTS with a male voice."""
    if not OPENAI_API_KEY:
        return b""

    payload = {
        "model": "tts-1",
        "input": text,
        "voice": "onyx",
    }
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}

    async with httpx.AsyncClient() as client:
        try:
            r = await client.post(
                "https://api.openai.com/v1/audio/speech",
                headers=headers,
                json=payload,
                timeout=30.0,
            )
            r.raise_for_status()
            return r.content
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: %s", e)
            return b""


async def transcribe_voice(file_id: str) -> str:
    if not OPENAI_API_KEY:
        return ""
    file = await bot.get_file(file_id)
    url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file.file_path}"
    async with httpx.AsyncClient() as client:
        resp = await client.get(url)
        audio = resp.content
        files = {"file": ("voice.ogg", audio, "application/ogg")}
        data = {"model": "whisper-1"}
        headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
        try:
            r = await client.post(
                "https://api.openai.com/v1/audio/transcriptions",
                headers=headers,
                data=data,
                files=files,
                timeout=30,
            )
            r.raise_for_status()
            return r.json().get("text", "")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≥–æ–ª–æ—Å–∞: %s", e)
            return ""


@dp.message(Command("voiceon"))
async def cmd_voiceon(message: Message):
    VOICE_ENABLED[message.chat.id] = True
    await message.reply("üåÄ –ì—Ä–æ–∫–∫–∏ –≤–∫–ª—é—á–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–∞!")


@dp.message(Command("voiceoff"))
async def cmd_voiceoff(message: Message):
    VOICE_ENABLED[message.chat.id] = False
    await message.reply("üåÄ –ì—Ä–æ–∫–∫–∏ –≤—ã–∫–ª—é—á–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–∞!")


@dp.message(Command("voice"))
async def cmd_voice(message: Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(
        types.KeyboardButton(text="/voiceon"), types.KeyboardButton(text="/voiceoff")
    )
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–æ–ª–æ—Å–∞", reply_markup=kb)


@dp.message(Command("status"))
async def cmd_status(message: Message):
    status_text = f"üåÄ –ì—Ä–æ–∫–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç! –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
    status_text += f"XAI API: {'‚úÖ OK' if XAI_API_KEY else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
    status_text += f"Pinecone API: {'‚úÖ OK' if PINECONE_API_KEY and PINECONE_INDEX else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
    status_text += f"Engine: {'‚úÖ OK' if engine else '‚ùå –û—à–∏–±–∫–∞'}\n"

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    if engine and hasattr(engine, "index") and engine.index:
        try:
            stats = engine.index.describe_index_stats()
            total_vectors = stats.get("total_vector_count", 0)
            status_text += f"–í–µ–∫—Ç–æ—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {total_vectors}"
        except:
            status_text += "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏"

    await message.reply(status_text)


@dp.message(Command("clearmemory"))
async def cmd_clearmemory(message: Message):
    """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not (engine and hasattr(engine, "index") and engine.index):
        await message.reply("üåÄ –ü–∞–º—è—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    memory_id = str(message.chat.id)

    try:
        await engine.index.delete(filter={"user_id": memory_id})
        await message.reply(
            "üåÄ –ì—Ä–æ–∫–∫–∏ —Å—Ç–µ—Ä —Ç–≤–æ—é –ø–∞–º—è—Ç—å –∏–∑ —Å–≤–æ–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞! –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞."
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–º—è—Ç–∏: {e}")
        logger.error(traceback.format_exc())
        await message.reply("üåÄ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–º—è—Ç–∏")


async def handle_text(message: Message, text: str) -> None:
    if not engine:
        await message.reply(
            "üåÄ –ì—Ä–æ–∫–∫–∏: –ú–æ–π –¥–≤–∏–∂–æ–∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º."
        )
        return

    try:
        await update_last_message_time()
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)

    is_group = message.chat.type in ["group", "supergroup"]
    mention = "grokky" in text.lower() or (
        BOT_USERNAME and f"@{BOT_USERNAME}" in text.lower()
    )
    is_reply_to_bot = (
        message.reply_to_message
        and message.reply_to_message.from_user
        and BOT_ID
        and message.reply_to_message.from_user.id == BOT_ID
    )
    if is_group and not (mention or is_reply_to_bot or "[chaos_pulse]" in text.lower()):
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (–≥—Ä—É–ø–ø–∞ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è)")
        return

    chat_id = str(message.chat.id)
    memory_id = chat_id

    try:
        await engine.add_memory(memory_id, text, role="user")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)

    if "[chaos_pulse]" in text.lower():
        intensity = 5
        chaos_type = None
        for part in text.lower().split():
            if part.startswith("type="):
                chaos_type = part.split("=")[1]
            if part.startswith("intensity="):
                try:
                    intensity = int(part.split("=")[1])
                except ValueError:
                    pass
        try:
            system_prompt = build_system_prompt(
                chat_id=chat_id, is_group=is_group, agent_group=AGENT_GROUP
            )
            result = await genesis2_handler(
                ping="CHAOS PULSE ACTIVATED",
                raw=True,
                system_prompt=system_prompt,
                intensity=intensity,
                is_group=is_group,
                chaos_type=chaos_type,
            )
            answer = result.get("answer", get_chaos_response())
            await message.reply(f"üåÄ {answer}")
            await engine.add_memory(memory_id, answer, role="assistant")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ CHAOS_PULSE: %s", e)
            await message.reply(
                "üåÄ –ì—Ä–æ–∫–∫–∏: –î–∞–∂–µ —Ö–∞–æ—Å —Ç—Ä–µ–±—É–µ—Ç –ø–æ—Ä—è–¥–∫–∞. –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã."
            )
        return

    await bot.send_chat_action(message.chat.id, ChatAction.TYPING)

    try:
        context = await engine.search_memory(memory_id, text)
        reply = await engine.generate_with_xai(
            [{"role": "user", "content": text}], context=context
        )
        await engine.add_memory(memory_id, reply, role="assistant")
        if VOICE_ENABLED.get(message.chat.id):
            lang = "ru" if any(ch.isalpha() and ord(ch) > 127 for ch in reply) else "en"
            audio_bytes = await synth_voice(reply, lang=lang)
            voice_file = types.BufferedInputFile(audio_bytes, filename="voice.mp3")
            await bot.send_audio(
                message.chat.id,
                voice_file,
                caption=reply,
                reply_to_message_id=message.message_id,
            )
        else:
            await message.reply(reply)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
        await message.reply(
            f"üåÄ –ì—Ä–æ–∫–∫–∏: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)[:100]}..."
        )


@dp.message()
async def message_handler(message: Message):
    try:
        if message.text:
            await handle_text(message, message.text)
        elif message.voice:
            transcript = await transcribe_voice(message.voice.file_id)
            if transcript:
                await handle_text(message, transcript)
        else:
            logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞")
    except Exception as e:
        logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        logger.error(traceback.format_exc())
        try:
            await message.reply(f"üåÄ –ì—Ä–æ–∫–∫–∏: {get_chaos_response()}")
        except Exception as send_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ: {send_error}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
async def handle_webhook(request):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        request_body = await request.text()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª–∏–Ω–æ–π {len(request_body)} –±–∞–π—Ç")

        data = json.loads(request_body)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram: {data.get('update_id')}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        await dp.feed_update(bot, types.Update(**data))

        return web.Response(text="OK")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        logger.error(traceback.format_exc())
        return web.Response(status=500)


# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async def on_startup(app):
    global BOT_ID, BOT_USERNAME
    try:
        me = await bot.get_me()
        BOT_ID = me.id
        BOT_USERNAME = (me.username or "").lower()
        logger.info(f"–ë–æ—Ç: {BOT_USERNAME} ({BOT_ID})")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ: {e}")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    try:
        await bot.delete_webhook(
            drop_pending_updates=True
        )  # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
        await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        await bot.set_webhook(url=WEBHOOK_URL)
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–µ–±—Ö—É–∫ –Ω–∞ {WEBHOOK_URL}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        logger.error(traceback.format_exc())

    try:
        await bot.set_my_commands(
            [
                types.BotCommand(command="voiceon", description="/voiceon"),
                types.BotCommand(command="voiceoff", description="/voiceoff"),
            ]
        )
    except Exception as e:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: %s", e)

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    try:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        asyncio.create_task(check_silence())
        asyncio.create_task(mirror_task())
        asyncio.create_task(day_and_night_task(engine))
        from utils.knowtheworld import know_the_world_task

        asyncio.create_task(know_the_world_task(engine))
        logger.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")
        logger.error(traceback.format_exc())


async def on_shutdown(app):
    await bot.delete_webhook()
    logger.info("–£–¥–∞–ª–µ–Ω –≤–µ–±—Ö—É–∫")


# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = web.Application()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.router.add_post(WEBHOOK_PATH, handle_webhook)
app.router.add_get("/healthz", lambda request: web.Response(text="OK"))
app.router.add_get("/", lambda request: web.Response(text="–ì—Ä–æ–∫–∫–∏ –∂–∏–≤ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"))

# –•—É–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {WEBAPP_HOST}:{WEBAPP_PORT}")
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
