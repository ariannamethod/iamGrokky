import os
import asyncio
import json
from datetime import datetime
import logging
import sys
import traceback

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiohttp import web

from utils.genesis2 import genesis2_handler
from utils.howru import check_silence, update_last_message_time
from utils.mirror import mirror_task
from utils.prompt import build_system_prompt, get_chaos_response

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º HybridGrokkyEngine
class SimpleGrokkyEngine:
    def __init__(self):
        self.xai_key = os.getenv("XAI_API_KEY")
        self.xai_h = {
            "Authorization": f"Bearer {self.xai_key}",
            "Content-Type": "application/json"
        }
        
    async def add_memory(self, user_id, content, role="user"):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å"""
        return True
        
    async def search_memory(self, user_id, query):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏"""
        return ""
        
    async def generate_with_xai(self, messages, context=""):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é xAI Grok-3"""
        import httpx
        from utils.prompt import build_system_prompt
        
        system = build_system_prompt()
        if context:
            system += f"\n\n–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ü–ê–ú–Ø–¢–ò:\n{context}"
            
        payload = {
            "model": "grok-3",
            "messages": [{"role": "system", "content": system}, *messages],
            "temperature": 0.9
        }
        
        async with httpx.AsyncClient() as client:
            res = await client.post(
                "https://api.x.ai/v1/chat/completions",
                headers=self.xai_h,
                json=payload,
                timeout=30.0
            )
            res.raise_for_status()
            return res.json()["choices"][0]["message"]["content"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO,
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    sys.exit(1)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è Railway
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "https://grokky-production.up.railway.app")
WEBHOOK_PATH = "/webhook"  # –ü—Ä–æ—Å—Ç–æ /webhook –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = os.getenv("WEBAPP_HOST", "0.0.0.0")
WEBAPP_PORT = int(os.getenv("PORT", 8080))
CHAT_ID = os.getenv("CHAT_ID")
AGENT_GROUP = os.getenv("AGENT_GROUP")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π API
XAI_API_KEY = os.getenv("XAI_API_KEY")

logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook –Ω–∞ {WEBHOOK_URL}")
logger.info(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {TELEGRAM_BOT_TOKEN[:5]}...{TELEGRAM_BOT_TOKEN[-5:]}")
logger.info(f"XAI API –∫–ª—é—á: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if XAI_API_KEY else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
try:
    engine = SimpleGrokkyEngine()
    logger.info("SimpleGrokkyEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SimpleGrokkyEngine: {e}")
    engine = None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
VOICE_ENABLED = {}

@dp.message(Command("voiceon"))
async def cmd_voiceon(message: Message):
    VOICE_ENABLED[message.chat.id] = True
    await message.reply("üåÄ –ì—Ä–æ–∫–∫–∏ –≤–∫–ª—é—á–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–∞!")

@dp.message(Command("voiceoff")) 
async def cmd_voiceoff(message: Message):
    VOICE_ENABLED[message.chat.id] = False
    await message.reply("üåÄ –ì—Ä–æ–∫–∫–∏ –≤—ã–∫–ª—é—á–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–∞!")

@dp.message(Command("status"))
async def cmd_status(message: Message):
    status_text = f"üåÄ –ì—Ä–æ–∫–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç! –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
    status_text += f"XAI API: {'‚úÖ OK' if XAI_API_KEY else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
    status_text += f"Engine: {'‚úÖ OK' if engine else '‚ùå –û—à–∏–±–∫–∞'}"
    await message.reply(status_text)

@dp.message()
async def message_handler(message: Message):
    try:
        if not message.text:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç {message.from_user.id}")
            return
            
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text[:20]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–≤–∏–∂–∫–∞
        if not engine:
            logger.error("SimpleGrokkyEngine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            await message.reply("üåÄ –ì—Ä–æ–∫–∫–∏: –ú–æ–π –¥–≤–∏–∂–æ–∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.")
            return
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            await update_last_message_time()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∏—á–Ω—ã–π —ç—Ç–æ —á–∞—Ç –∏–ª–∏ –≥—Ä—É–ø–ø–∞
        is_group = message.chat.type in ['group', 'supergroup']
        logger.info(f"–¢–∏–ø —á–∞—Ç–∞: {'–ì—Ä—É–ø–ø–∞' if is_group else '–õ–∏—á–Ω—ã–π'}")
        
        # –î–ª—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ - –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –í –≥—Ä—É–ø–ø–µ –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        if not is_group or (message.text and ('@grokky_bot' in message.text.lower() or 
                                           '[chaos_pulse]' in message.text.lower())):
            chat_id = str(message.chat.id)
            user_id = str(message.from_user.id)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã [CHAOS_PULSE]
            if message.text and '[chaos_pulse]' in message.text.lower():
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã CHAOS_PULSE")
                intensity = 5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                chaos_type = None
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
                parts = message.text.lower().split()
                for part in parts:
                    if part.startswith('type='):
                        chaos_type = part.split('=')[1]
                    if part.startswith('intensity='):
                        try:
                            intensity = int(part.split('=')[1])
                        except ValueError:
                            pass
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–∞–æ—Å–∞
                try:
                    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ö–∞–æ—Å–∞...")
                    system_prompt = build_system_prompt(
                        chat_id=chat_id, 
                        is_group=is_group,
                        agent_group=AGENT_GROUP
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –≥–µ–Ω–µ–∑–∏—Å
                    logger.info("–í—ã–∑–æ–≤ genesis2_handler...")
                    result = await genesis2_handler(
                        ping="CHAOS PULSE ACTIVATED",
                        raw=True,
                        system_prompt=system_prompt,
                        intensity=intensity,
                        is_group=is_group,
                        chaos_type=chaos_type
                    )
                    
                    await bot.send_message(
                        message.chat.id, 
                        f"üåÄ {result.get('answer', get_chaos_response())}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CHAOS_PULSE: {e}")
                    logger.error(traceback.format_exc())
                    await message.reply("üåÄ –ì—Ä–æ–∫–∫–∏: –î–∞–∂–µ —Ö–∞–æ—Å —Ç—Ä–µ–±—É–µ—Ç –ø–æ—Ä—è–¥–∫–∞. –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")
                return
            
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é xAI Grok-3
                logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é xAI...")
                reply = await engine.generate_with_xai(
                    [{"role": "user", "content": message.text}],
                    context=""  # –ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —Ç.–∫. —Ñ—É–Ω–∫—Ü–∏—è –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                )
                logger.info("–û—Ç–≤–µ—Ç xAI –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
                await bot.send_message(message.chat.id, reply)
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                logger.error(traceback.format_exc())
                await message.reply(f"üåÄ –ì—Ä–æ–∫–∫–∏: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)[:100]}...")
        else:
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (–≥—Ä—É–ø–ø–∞ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è)")
            
    except Exception as e:
        logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        logger.error(traceback.format_exc())
        try:
            await message.reply(f"üåÄ –ì—Ä–æ–∫–∫–∏: {get_chaos_response()}")
        except Exception as send_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ: {send_error}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
async def handle_webhook(request):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        request_body = await request.text()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª–∏–Ω–æ–π {len(request_body)} –±–∞–π—Ç")
        
        data = json.loads(request_body)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram: {data.get('update_id')}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        await dp.feed_update(bot, types.Update(**data))
        
        return web.Response(text='OK')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        logger.error(traceback.format_exc())
        return web.Response(status=500)

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async def on_startup(app):
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    try:
        await bot.delete_webhook(drop_pending_updates=True)  # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
        await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        await bot.set_webhook(url=WEBHOOK_URL)
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–µ–±—Ö—É–∫ –Ω–∞ {WEBHOOK_URL}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        logger.error(traceback.format_exc())
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    try:
        asyncio.create_task(check_silence(bot=bot))
        asyncio.create_task(mirror_task(bot=bot))
        logger.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")
        logger.error(traceback.format_exc())

async def on_shutdown(app):
    await bot.delete_webhook()
    logger.info("–£–¥–∞–ª–µ–Ω –≤–µ–±—Ö—É–∫")

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = web.Application()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.router.add_post(WEBHOOK_PATH, handle_webhook)
app.router.add_get("/healthz", lambda request: web.Response(text="OK"))
app.router.add_get("/", lambda request: web.Response(text="–ì—Ä–æ–∫–∫–∏ –∂–∏–≤ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"))

# –•—É–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {WEBAPP_HOST}:{WEBAPP_PORT}")
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
