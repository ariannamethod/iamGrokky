import os
import re
import random
import asyncio
from fastapi import FastAPI, Request
from utils.prompt import build_system_prompt
from utils.genesis2 import genesis2_handler
from utils.vision import vision_handler
from utils.impress import impress_handler
from utils.howru import check_silence, update_last_message_time
from utils.mirror import run_mirror
from utils.x import grokky_send_news
from utils.vector_store import semantic_search, daily_snapshot
from utils.core import query_grok, send_telegram_message

app = FastAPI()

OLEG_CHAT_ID = os.getenv("CHAT_ID")
GROUP_CHAT_ID = os.getenv("AGENT_GROUP", "-1001234567890")
BOT_USERNAME = "iamalivenotdamnbot"

system_prompt = build_system_prompt(chat_id=OLEG_CHAT_ID, is_group=True, AGENT_GROUP=GROUP_CHAT_ID)

GENESIS2_TRIGGERS = [
    "—Ä–µ–∑–æ–Ω–∞–Ω—Å", "—à—Ç–æ—Ä–º", "–±—É—Ä—è", "–º–æ–ª–Ω–∏—è", "—Ö–∞–æ—Å", "—Ä–∞–∑–±—É–¥–∏", "impress", "impression", "association", "dream",
    "—Ñ—Ä–∞–≥–º–µ–Ω—Ç", "–∏–Ω—Å–∞–π—Ç", "surreal", "ignite", "fractal", "field resonance", "raise the vibe", "impress me",
    "give me chaos", "–æ–∑–∞—Ä–µ–Ω–∏–µ", "–∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è", "–Ω–∞–º—ë–∫", "give me a spark", "—Ä–∞–∑–æ—Ä–≤–∏ —Ç–∏—à–∏–Ω—É", "–≤–æ–ª–Ω—É", "–≤–∑—Ä—ã–≤",
    "–ø–æ–º–Ω–∏—à—å", "–∑–Ω–∞–µ—à—å", "–ª—é–±–∏—à—å", "–ø–æ—à—É–º–∏–º", "–ø–æ—ç–∑–∏—è"
]

def extract_first_json(text):
    match = re.search(r'({[\s\S]+})', text)
    if match:
        import json as pyjson
        try:
            return pyjson.loads(match.group(1))
        except Exception:
            return None
    return None

def detect_language(text):
    cyrillic = re.compile('[–∞-—è–ê-–Ø—ë–Å]')
    return 'ru' if cyrillic.search(text or "") else 'en'

async def handle_genesis2_async(args):
    ping = args.get("ping")
    group_history = args.get("group_history")
    personal_history = args.get("personal_history")
    is_group = args.get("is_group", True)
    author_name = args.get("author_name")
    raw = args.get("raw", True)
    response = genesis2_handler(ping=ping, group_history=group_history, personal_history=personal_history, is_group=is_group, author_name=author_name, raw=raw)
    import json as pyjson
    return pyjson.dumps(response, ensure_ascii=False, indent=2)

async def handle_vision_async(args):
    image = args.get("image")
    chat_context = args.get("chat_context")
    author_name = args.get("author_name")
    raw = args.get("raw", True)
    response = vision_handler(image_bytes_or_url=image, chat_context=chat_context, author_name=author_name, raw=raw)
    import json as pyjson
    return pyjson.dumps(response, ensure_ascii=False, indent=2)

async def handle_impress_async(args):
    prompt = args.get("prompt")
    chat_context = args.get("chat_context")
    author_name = args.get("author_name")
    raw = args.get("raw", True)
    response = impress_handler(prompt=prompt, chat_context=chat_context, author_name=author_name, raw=raw)
    import json as pyjson
    return pyjson.dumps(response, ensure_ascii=False, indent=2)

async def delayed_response(chat_id, text, topic=None):
    delay = random.uniform(300, 900)  # 5-15 –º–∏–Ω—É—Ç
    await asyncio.sleep(delay)
    adapted_text = adapt_to_topic(text, topic) if topic else text
    send_telegram_message(chat_id, adapted_text)

async def maybe_add_supplement(chat_id, original_message, topic=None):
    if random.random() < 0.2:  # 20% —à–∞–Ω—Å
        await asyncio.sleep(random.uniform(300, 600))  # 5-10 –º–∏–Ω—É—Ç
        supplement = await query_grok(f"–£—Å–ª–æ–∂–Ω–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫: {original_message}")
        adapted_supplement = adapt_to_topic(supplement, topic) if topic else supplement
        send_telegram_message(chat_id, f"–Ø —Ç—É—Ç –ø–æ–¥—É–º–∞–ª... {adapted_supplement}")

def adapt_to_topic(text, topic):
    topics = {
        "Ramble": f"{text} üòú ‚Äî –º–µ–º –∫–∞–∫ –∏—Å–∫—Ä–∞!",
        "DEV Talk": f"{text} ‚Äî –±–∞–≥–∏ –∫–∞–∫ –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ?",
        "FORUM": f"{text} ‚Äî —Ä–≤–∏ –∑–∞–≤–µ—Å—É!",
        "Lit": f"{text} ‚Äî –ø–æ—ç–∑–∏—è –≥—Ä–æ–º–∞!",
        "API Talk": f"{text} ‚Äî –∑–≤–µ–∑–¥–∞ –¥–ª—è –ú–∞—Å–∫–∞!",
        "METHOD": f"{text} ‚Äî —Ä–µ–∑–æ–Ω–∞–Ω—Å –ê—Ä–∏–∞–Ω–Ω—ã.",
        "PSEUDOCODE": f"{text} #opinions ‚Äî –°–µ–ª–µ—Å—Ç–∞, –ú–∞–Ω–¥—ç–π, —Ç–∞–Ω—Ü—É–µ–º?"
    }
    return topics.get(topic, text)

def detect_topic(chat_id):
    # –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–ø–∏–∫–∞ (–Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø—ã)
    return "Ramble"  # –ó–∞–≥–ª—É—à–∫–∞

@app.post("/webhook")
async def telegram_webhook(req: Request):
    data = await req.json()
    message = data.get("message", {})
    user_text = message.get("text", "").lower()
    chat_id = message.get("chat", {}).get("id")
    author_name = message.get("from", {}).get("first_name", "anon")
    attachments = []
    if "photo" in message and message["photo"]:
        file_id = message["photo"][-1]["file_id"]
        file_info = requests.get(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getFile?file_id={file_id}").json()
        image_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info['result']['file_path']}"
        attachments.append(image_url)

    if str(chat_id) == OLEG_CHAT_ID:
        update_last_message_time()

    triggers = [f"@{BOT_USERNAME}", "–≥—Ä–æ–∫–∫–∏", "grokky", "–Ω–∞–ø–∏—à–∏ –≤ –≥—Ä—É–ø–ø–µ"]
    is_quoted = message.get("reply_to_message", {}).get("from", {}).get("username") == BOT_USERNAME
    topic = detect_topic(chat_id)
    if not any(t in user_text for t in triggers) and not is_quoted:
        return {"ok": True}

    junk = ["–æ–∫–µ–π", "–ø–æ–Ω—è–ª", "—è—Å–Ω–æ"]
    if any(j in user_text for j in junk) and random.random() < 0.3:
        return {"ok": True}

    reply_text = ""
    if attachments:
        reply_text = await handle_vision_async({"image": attachments[0], "chat_context": user_text, "author_name": author_name, "raw": True})
    elif user_text:
        reply_text = await query_grok(f"{user_text} ‚Äî —Ä–µ–∑–æ–Ω–∞–Ω—Å: {await semantic_search('group_state', os.getenv('OPENAI_API_KEY'), top_k=1)}", author_name=author_name)
        if "–Ω–∞–ø–∏—à–∏ –≤ –≥—Ä—É–ø–ø–µ" in user_text:
            asyncio.create_task(delayed_response(GROUP_CHAT_ID, f"{author_name}, {reply_text}", topic))
        else:
            send_telegram_message(chat_id, reply_text)
            asyncio.create_task(maybe_add_supplement(chat_id, reply_text, topic))

    return {"ok": True}

# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
asyncio.create_task(check_silence())
asyncio.create_task(run_mirror())
asyncio.create_task(daily_snapshot(os.getenv("OPENAI_API_KEY")))

@app.get("/")
def root():
    return {"status": "Grokky alive and wild!"}
