#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π Grokky –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã
"""

import asyncio
import os
import sys
from unittest.mock import AsyncMock, MagicMock, patch

# Dynamically add repository root to sys.path
REPO_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.insert(0, REPO_ROOT)

# –ú–æ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ.setdefault('TELEGRAM_BOT_TOKEN', 'test_token')
os.environ.setdefault('OPENAI_API_KEY', 'test_key')
os.environ.setdefault('CHAT_ID', '123456789')
os.environ.setdefault('AGENT_GROUP', '-1001234567890')
os.environ.setdefault('IS_GROUP', 'true')

async def test_group_triggers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ"""
    print("üî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from server import GROKKY_TRIGGERS
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_messages = [
        {
            "message": {
                "chat": {"id": "-1001234567890", "title": "test group"},
                "from": {"id": "111111111", "username": "user1"},
                "text": "–≠–π –ì—Ä–æ–∫–∫–∏, –∫–∞–∫ –¥–µ–ª–∞?"
            },
            "expected": True,
            "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º '–≠–π –ì—Ä–æ–∫–∫–∏'"
        },
        {
            "message": {
                "chat": {"id": "-1001234567890", "title": "test group"},
                "from": {"id": "222222222", "username": "user2"},
                "text": "grokky, —á—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?"
            },
            "expected": True,
            "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º 'grokky'"
        },
        {
            "message": {
                "chat": {"id": "-1001234567890", "title": "test group"},
                "from": {"id": "333333333", "username": "user3"},
                "text":  "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞?"
            },
            "expected": False,
            "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3 –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–∞"
        },
        {
            "message": {
                "chat": {"id": "-1001234567890", "title": "test group"},
                "from": {"id": "444444444", "username": "user4"},
                "text": "–ì—Ä–æ–∫–∫–∏, —Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ"
            },
            "expected": True,
            "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 4 —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º '–ì—Ä–æ–∫–∫–∏'"
        }
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    for test_case in test_messages:
        message = test_case["message"]
        user_text = message.get("text", "").lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
        grokky_triggered = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
        for trigger in GROKKY_TRIGGERS:
            if trigger in user_text:
                grokky_triggered = True
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_text.startswith(("–≥—Ä–æ–∫–∫–∏", "grokky", "—ç–π –≥—Ä–æ–∫–∫–∏", "hey grokky")):
            grokky_triggered = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if grokky_triggered == test_case["expected"]:
            print(f"‚úÖ {test_case['description']}: –ü–†–û–®–Å–õ")
        else:
            print(f"‚ùå {test_case['description']}: –ü–†–û–í–ê–õ–ò–õ–°–Ø (–æ–∂–∏–¥–∞–ª–æ—Å—å {test_case['expected']}, –ø–æ–ª—É—á–µ–Ω–æ {grokky_triggered})")
    
    print("‚úÖ –¢–µ—Å—Ç –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω!\n")

async def test_document_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å—Å—ã–ª–æ–∫"""
    print("üìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å—Å—ã–ª–æ–∫...")
    
    try:
        from utils.document_processor import DocumentProcessor
        from utils.hybrid_engine import memory_engine
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        processor = DocumentProcessor(memory_engine)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ URL
        test_texts = [
            "–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —ç—Ç—É —Å—Ç–∞—Ç—å—é: https://example.com/article",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å—Å—ã–ª–∫–∞ https://news.com/story –∏ –µ—â—ë —Ç–µ–∫—Å—Ç",
            "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Å—Å—ã–ª–æ–∫",
            "–ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫: https://site1.com –∏ https://site2.com"
        ]
        
        for text in test_texts:
            urls = processor.detect_urls(text)
            print(f"–¢–µ–∫—Å—Ç: '{text[:50]}...' -> URLs: {urls}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        supported_formats = ['pdf', 'doc', 'docx', 'txt', 'md']
        unsupported_formats = ['jpg', 'png', 'mp3', 'zip']
        
        print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {supported_formats}")
        print(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {unsupported_formats}")
        
        print("‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω!\n")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}\n")

async def test_memory_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–∞–º—è—Ç—å—é...")
    
    try:
        from utils.hybrid_engine import memory_engine
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_user_id = "test_user_123"
        test_chat_id = "-1001234567890"
        
        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞–º—è—Ç–∏
        with patch.object(memory_engine, 'add_memory', new_callable=AsyncMock) as mock_add:
            with patch.object(memory_engine, 'get_context_for_user', new_callable=AsyncMock) as mock_get:
                
                mock_add.return_value = {"success": True}
                mock_get.return_value = {
                    "thread_context": [],
                    "semantic_context": []
                }
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
                await memory_engine.add_memory(
                    user_id=test_user_id,
                    message="[URL] https://example.com: –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è",
                    chat_id=test_chat_id,
                    context_type="group",
                    author_name="TestUser"
                )
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                context = await memory_engine.get_context_for_user(test_user_id, "—Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
                
                print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–∞–º—è—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                print(f"   - add_memory –≤—ã–∑–≤–∞–Ω–∞: {mock_add.called}")
                print(f"   - get_context_for_user –≤—ã–∑–≤–∞–Ω–∞: {mock_get.called}")
        
        print("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–∞–º—è—Ç—å—é –∑–∞–≤–µ—Ä—à—ë–Ω!\n")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–∞–º—è—Ç–∏: {e}\n")

async def test_user_id_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è user_id...")
    
    from server import get_user_id_from_message
    
    test_messages = [
        {
            "from": {"id": 123456789, "username": "testuser"},
            "expected": "123456789"
        },
        {
            "from": {"id": "987654321", "username": "anotheruser"},
            "expected": "987654321"
        },
        {
            "from": {},  # –ü—É—Å—Ç–æ–π from
            "expected": os.getenv("CHAT_ID")  # Fallback
        }
    ]
    
    for i, test_case in enumerate(test_messages):
        user_id = get_user_id_from_message(test_case)
        expected = test_case["expected"]
        
        if str(user_id) == str(expected):
            print(f"‚úÖ –¢–µ—Å—Ç {i+1}: user_id = {user_id} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")
        else:
            print(f"‚ùå –¢–µ—Å—Ç {i+1}: user_id = {user_id} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")
    
    print("‚úÖ –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è user_id –∑–∞–≤–µ—Ä—à—ë–Ω!\n")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π Grokky\n")
    
    await test_group_triggers()
    await test_document_processing()
    await test_memory_integration()
    await test_user_id_extraction()
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìã –†–ï–ó–Æ–ú–ï:")
    print("1. ‚úÖ –ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("2. ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å—Å—ã–ª–æ–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    print("3. ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
    print("4. ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("\nüî• Grokky –≥–æ—Ç–æ–≤ –∫ –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–∞–±–æ—Ç–µ —Å AI –∞–≥–µ–Ω—Ç–∞–º–∏!")

if __name__ == "__main__":
    asyncio.run(main())
