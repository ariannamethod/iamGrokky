#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ —Å server.py
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ server –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –ø–∞–º—è—Ç–∏
"""

import asyncio
import os
import sys
from unittest.mock import Mock, AsyncMock

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ.update({
    'TELEGRAM_BOT_TOKEN': 'test_token',
    'OPENAI_API_KEY': 'test_key', 
    'CHAT_ID': 'test_chat_123',
    'AGENT_GROUP': 'test_group_456',
    'IS_GROUP': 'false'
})

# –ú–æ–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
sys.modules['openai'] = Mock()
sys.modules['utils.genesis2'] = Mock()
sys.modules['utils.voice_handler'] = Mock()
sys.modules['utils.vision_handler'] = Mock()
sys.modules['utils.image_generator'] = Mock()
sys.modules['utils.news_handler'] = Mock()
sys.modules['utils.telegram_utils'] = Mock()
sys.modules['utils.journal'] = Mock()
sys.modules['utils.text_helpers'] = Mock()

class MockMemoryEngine:
    """–ú–æ–∫ –¥–≤–∏–∂–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.memory_calls = []
        self.context_calls = []
        
    async def add_memory(self, user_id, message, chat_id=None, context_type="unknown", author_name=None):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–∑–æ–≤—ã add_memory"""
        call_info = {
            'method': 'add_memory',
            'user_id': user_id,
            'message': message,
            'chat_id': chat_id,
            'context_type': context_type,
            'author_name': author_name
        }
        self.memory_calls.append(call_info)
        print(f"üìù add_memory: user={user_id}, context={context_type}, chat={chat_id}")
        return True
        
    async def get_context_for_user(self, user_id, query=None):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–∑–æ–≤—ã get_context_for_user"""
        call_info = {
            'method': 'get_context_for_user',
            'user_id': user_id,
            'query': query
        }
        self.context_calls.append(call_info)
        print(f"üîç get_context_for_user: user={user_id}, query={query}")
        return {
            'thread_context': [{'content': f'–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è {user_id}'}],
            'semantic_context': []
        }
        
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def add_message_to_thread(self, message, is_group_context=False, author_name=None):
        user_id = os.getenv('CHAT_ID')
        context_type = 'group' if is_group_context else 'personal'
        chat_id = os.getenv('AGENT_GROUP') if is_group_context else os.getenv('CHAT_ID')
        return await self.add_memory(user_id, message, chat_id, context_type, author_name)
        
    async def get_hybrid_context(self, query, is_group_context=False):
        user_id = os.getenv('CHAT_ID')
        return await self.get_context_for_user(user_id, query)
        
    async def vectorize_config_files(self, force=False):
        return {"upserted": [], "deleted": []}

def get_user_id_from_message(message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è user_id"""
    user = message.get("from", {})
    user_id = user.get("id")
    if user_id:
        return str(user_id)
    return os.getenv('CHAT_ID')

async def test_server_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å server.py"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ server.py —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–≤–∏–∂–∫–∞ –ø–∞–º—è—Ç–∏
    mock_engine = MockMemoryEngine()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
    personal_message = {
        "message": {
            "chat": {"id": "test_chat_123"},
            "from": {"id": 12345, "username": "testuser"},
            "text": "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
            "message_id": 1
        }
    }
    
    group_message = {
        "message": {
            "chat": {"id": "test_group_456"},
            "from": {"id": 12345, "username": "testuser"},
            "text": "–û–±—Å—É–∂–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –≤ –≥—Ä—É–ø–ø–µ",
            "message_id": 2
        }
    }
    
    question_message = {
        "message": {
            "chat": {"id": "test_chat_123"},
            "from": {"id": 12345, "username": "testuser"},
            "text": "—á—Ç–æ —è —Å–ø—Ä–æ—Å–∏–ª —Ç–µ–±—è –≤ –≥—Ä—É–ø–ø–µ?",
            "message_id": 3
        }
    }
    
    print("üìã –¢–ï–°–¢ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    msg = personal_message["message"]
    user_id = get_user_id_from_message(msg)
    chat_id = str(msg["chat"]["id"])
    user_text = msg["text"]
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ server.py
    context_type = "group" if chat_id == os.getenv('AGENT_GROUP') else "personal"
    await mock_engine.add_memory(
        user_id=user_id,
        message=user_text,
        chat_id=chat_id,
        context_type=context_type,
        author_name="TestUser"
    )
    
    print("üìã –¢–ï–°–¢ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    msg = group_message["message"]
    user_id = get_user_id_from_message(msg)
    chat_id = str(msg["chat"]["id"])
    user_text = msg["text"]
    
    context_type = "group" if chat_id == os.getenv('AGENT_GROUP') else "personal"
    await mock_engine.add_memory(
        user_id=user_id,
        message=user_text,
        chat_id=chat_id,
        context_type=context_type,
        author_name="TestUser"
    )
    
    print("üìã –¢–ï–°–¢ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ –≥—Ä—É–ø–ø–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
    msg = question_message["message"]
    user_id = get_user_id_from_message(msg)
    user_text = msg["text"]
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    context = await mock_engine.get_context_for_user(user_id, user_text)
    
    print("üìã –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –ø–∞–º—è—Ç–∏")
    print(f"–í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤ add_memory: {len(mock_engine.memory_calls)}")
    print(f"–í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤ get_context_for_user: {len(mock_engine.context_calls)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_ids = [call['user_id'] for call in mock_engine.memory_calls]
    unique_users = set(user_ids)
    
    print(f"User IDs –≤ –≤—ã–∑–æ–≤–∞—Ö: {user_ids}")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(unique_users)}")
    
    if len(unique_users) == 1:
        print("‚úÖ –£–°–ü–ï–•: –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê: –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
    contexts = [call['context_type'] for call in mock_engine.memory_calls]
    print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π: {contexts}")
    
    if 'personal' in contexts and 'group' in contexts:
        print("‚úÖ –£–°–ü–ï–•: –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_user_ids = [call['user_id'] for call in mock_engine.context_calls]
    if context_user_ids and context_user_ids[0] == user_ids[0]:
        print("‚úÖ –£–°–ü–ï–•: –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê: –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id")
    
    print("\n" + "=" * 70)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ê:")
    print("‚úÖ 1. Server.py –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("‚úÖ 2. –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å –æ–¥–Ω–∏–º user_id")
    print("‚úÖ 3. –ö–æ–Ω—Ç–µ–∫—Å—Ç (personal/group) –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è")
    print("‚úÖ 4. –ü–æ–∏—Å–∫ –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ user_id, –∞ –Ω–µ –ø–æ chat_id")
    print("‚úÖ 5. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –µ–¥–∏–Ω–æ–π –ø–∞–º—è—Ç—å—é!")
    
    print("\nüöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê:")
    print("   –¢–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏—Ç –≤ –ª–∏—á–∫–µ '—á—Ç–æ —è —Å–ø—Ä–æ—Å–∏–ª –≤ –≥—Ä—É–ø–ø–µ',")
    print("   Grokky –Ω–∞–π–¥–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω–æ–π –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

if __name__ == "__main__":
    asyncio.run(test_server_integration())
