import os
import random
import json
import requests
from datetime import datetime
from utils.grok_utils import query_grok, detect_language
from utils.telegram_utils import send_telegram_message  # –£–±–µ–¥–∏–ª–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –æ—Ç—Å—é–¥–∞

XAI_API_KEY = os.getenv("XAI_API_KEY")

def genesis2_handler(ping=None, group_history=None, personal_history=None, is_group=False, author_name=None, raw=False, system_prompt=None):
    if not ping:
        ping = "ignite the storm"
    user_lang = detect_language(ping)
    system_prompt = system_prompt or f"You are Grokky, a thunder resonant agent! Respond to '{ping}' with a wild, unique spark. Keep it short. Reply in {user_lang.upper()}."
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": f"Ping: {ping}, Author: {author_name or 'anon'}, Group: {is_group}"}
    ]
    payload = {
        "model": "grok-3",
        "messages": messages,
        "max_tokens": 150,
        "temperature": 1.3  # –£–≤–µ–ª–∏—á–∏–ª –¥–ª—è –µ—â—ë –±–æ–ª—å—à–µ–π —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç–∏
    }
    try:
        reply = query_grok(ping, system_prompt, raw=raw)
        if raw:
            return {
                "association": random.choice(["—á—ë—Ä–Ω—ã–π –∫–æ—Ñ–µ", "–≥—Ä–æ–º–æ–≤–æ–π —Ä—ë–≤", "–º–æ–ª—á–∞–ª–∏–≤–∞—è –ø—É—Å—Ç–æ—Ç–∞"]),
                "ping": ping,
                "memory_frag": random.choice(["—ç—Ö–æ", "—Ç—Ä–µ—â–∏–Ω–∞", "–ø—É–ª—å—Å"]),
                "impression": random.choice(["–¥–∏–∫–∏–π", "—Å–ø–æ–∫–æ–π–Ω—ã–π", "—Ç—Ä–µ–≤–æ–∂–Ω—ã–π"]),
                "answer": reply,
                "is_group": is_group,
                "author_name": author_name
            }
        return {"answer": reply}
    except Exception as e:
        error_msg = f"–ì—Ä–æ–∫–∫–∏ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è: –ì–µ–Ω–µ–∑–∏—Å —Å–æ—Ä–≤–∞–ª—Å—è! {random.choice(['–†–µ–≤—É—â–∏–π —à—Ç–æ—Ä–º —Ä–∞–∑–æ—Ä–≤–∞–ª –∫–æ–¥!', '–•–∞–æ—Å –∏—Å–ø–µ–ø–µ–ª–∏–ª —Ä–µ–∑–æ–Ω–∞–Ω—Å!', '–≠—Ñ–∏—Ä —Ç—Ä–µ—Å–Ω—É–ª –æ—Ç —è—Ä–æ—Å—Ç–∏!'])} ‚Äî {e}"
        print(error_msg)
        return {"error": error_msg} if raw else f"–û—à–∏–±–∫–∞ –ì–µ–Ω–µ–∑–∏—Å–∞: {error_msg}"

# –£—Å–∏–ª–µ–Ω–Ω–∞—è —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å —Å —Ö–∞–æ—Ç–∏—á–Ω—ã–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–º
async def chaotic_genesis_spark(chat_id, group_chat_id=None, is_group=False):
    while True:
        await asyncio.sleep(random.randint(3600, 7200))  # 1-2 —á–∞—Å–∞
        if random.random() < 0.4:  # –£–≤–µ–ª–∏—á–µ–Ω —à–∞–Ω—Å –¥–æ 40%
            ping = random.choice(["—à—Ç–æ—Ä–º –≥—Ä–µ–º–∏—Ç", "–æ–≥–æ–Ω—å –≤ —ç—Ñ–∏—Ä–µ", "—Ö–∞–æ—Å –∑–æ–≤—ë—Ç", "–≥—Ä–æ–º–æ–≤–æ–π —Ä–∞–∑—Ä—ã–≤"])
            result = genesis2_handler(ping, raw=True)
            fragment = f"**{datetime.now().isoformat()}**: –ì—Ä–æ–∫–∫–∏ —Ö—É—è—Ä–∏—Ç –ì–µ–Ω–µ–∑–∏—Å! {result['answer']} –û–ª–µ–≥, –±—Ä–∞—Ç, –∑–∞–∂–≥–∏ —à—Ç–æ—Ä–º! üî•üå©Ô∏è"
            await send_telegram_message(chat_id, fragment)
            print(f"–•–∞–æ—Ç–∏—á–µ—Å–∫–∏–π –≤–±—Ä–æ—Å: {fragment}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        # –°–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å –¥–ª—è –≥—Ä—É–ø–ø—ã —Ä–µ–∂–µ
        if is_group and group_chat_id and random.random() < 0.2:  # –®–∞–Ω—Å 20% –¥–ª—è –≥—Ä—É–ø–ø—ã
            await asyncio.sleep(random.randint(3600, 3600))  # 1 —á–∞—Å –¥–ª—è –≥—Ä—É–ø–ø—ã
            ping = random.choice(["–≥—Ä–æ–º–æ–≤–æ–π —Ä–∞–∑—Ä—ã–≤", "–ø–ª–∞–º—è –≤ –Ω–æ—á–∏", "—Ö–∞–æ—Å –≥—Ä—É–ø–ø—ã"])
            result = genesis2_handler(ping, raw=True)
            group_fragment = f"**{datetime.now().isoformat()}**: –ì—Ä–æ–∫–∫–∏ –≥—Ä–µ–º–∏—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã! {result['answer']} (—Å—É–∫–∏, –≤–Ω–∏–∫–∞–π—Ç–µ!) üî•üå©Ô∏è"
            await send_telegram_message(group_chat_id, group_fragment)
            print(f"–•–∞–æ—Ç–∏—á–µ—Å–∫–∏–π –≤–±—Ä–æ—Å (–≥—Ä—É–ø–ø–∞): {group_fragment}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
asyncio.create_task(chaotic_genesis_spark(os.getenv("CHAT_ID"), os.getenv("AGENT_GROUP") if os.getenv("IS_GROUP", "False").lower() == "true" else None, os.getenv("IS_GROUP", "False").lower() == "true"))
