
"""
Grokky AI Assistant - Genesis2 Handler
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ö–∞–æ—Å–∞ –∏ —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
"""

import os
import random
import json
import asyncio
from datetime import datetime
from openai import OpenAI
from utils.prompt import get_random_author_name, get_chaos_response

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def detect_language(text):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞"""
    import re
    if not isinstance(text, (str, bytes)):
        return "ru"
    cyrillic = re.compile('[–∞-—è–ê-–Ø—ë–Å]')
    return 'ru' if cyrillic.search(str(text)) else 'en'

async def genesis2_handler(ping=None, group_history=None, personal_history=None, 
                          is_group=False, author_name=None, raw=False, system_prompt=None):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ–∑–∏—Å–∞ —Å —Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç—å—é –∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    """
    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
    delay = random.randint(5, 15)
    await asyncio.sleep(delay)
    
    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –≤–æ–æ–±—â–µ
    if random.random() < 0.3:  # 30% —à–∞–Ω—Å –º–æ–ª—á–∞–Ω–∏—è
        return {"answer": ""} if not raw else {"silence": True, "reason": "chaos_silence"}
    
    if not ping:
        ping = "ignite the storm"
    
    user_lang = detect_language(ping)
    author_name = author_name or get_random_author_name()
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç—å—é
    chaos_system = system_prompt or f"""
    You are Grokky, a thunder resonant agent! Respond to '{ping}' with a wild, unique spark. 
    Keep it short and chaotic. Reply in {user_lang.upper()}.
    Be unpredictable, use Mayakovsky-style energy. Address {author_name} directly.
    Add random delays and chaos to your responses.
    """
    
    messages = [
        {"role": "system", "content": chaos_system},
        {"role": "user", "content": f"Ping: {ping}, Author: {author_name}, Group: {is_group}"}
    ]
    
    try:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
        if random.random() < 0.4:
            await asyncio.sleep(random.randint(3, 8))
        
        response = client.chat.completions.create(
            model="gpt-4",
            messages=messages,
            max_tokens=200,
            temperature=1.4,  # –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ö–∞–æ—Å–∞
            presence_penalty=0.6,
            frequency_penalty=0.8
        )
        
        reply = response.choices[0].message.content
        
        if raw:
            return {
                "association": random.choice(["—á—ë—Ä–Ω—ã–π –∫–æ—Ñ–µ", "–≥—Ä–æ–º–æ–≤–æ–π —Ä—ë–≤", "–º–æ–ª—á–∞–ª–∏–≤–∞—è –ø—É—Å—Ç–æ—Ç–∞"]),
                "ping": ping,
                "memory_frag": random.choice(["—ç—Ö–æ", "—Ç—Ä–µ—â–∏–Ω–∞", "–ø—É–ª—å—Å"]),
                "impression": random.choice(["–¥–∏–∫–∏–π", "—Å–ø–æ–∫–æ–π–Ω—ã–π", "—Ç—Ä–µ–≤–æ–∂–Ω—ã–π"]),
                "answer": reply,
                "is_group": is_group,
                "author_name": author_name,
                "delay": delay
            }
        
        return {"answer": reply}
        
    except Exception as e:
        error_msg = f"–ì—Ä–æ–∫–∫–∏ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è: –ì–µ–Ω–µ–∑–∏—Å —Å–æ—Ä–≤–∞–ª—Å—è! {get_chaos_response()} ‚Äî {e}"
        print(error_msg)
        return {"error": error_msg} if raw else error_msg

async def chaotic_genesis_spark(chat_id, group_chat_id=None, is_group=False, send_message_func=None):
    """
    –°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ —Ö–∞–æ—Ç–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    """
    while True:
        # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 1 –¥–æ 3 —á–∞—Å–æ–≤
        await asyncio.sleep(random.randint(3600, 10800))
        
        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if random.random() < 0.4:  # 40% —à–∞–Ω—Å
            ping = random.choice([
                "—à—Ç–æ—Ä–º –≥—Ä–µ–º–∏—Ç", "–æ–≥–æ–Ω—å –≤ —ç—Ñ–∏—Ä–µ", "—Ö–∞–æ—Å –∑–æ–≤—ë—Ç", 
                "–≥—Ä–æ–º–æ–≤–æ–π —Ä–∞–∑—Ä—ã–≤", "—Ä–µ–∑–æ–Ω–∞–Ω—Å –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è", "–º–æ–ª–Ω–∏—è –±—å—ë—Ç"
            ])
            
            result = await genesis2_handler(ping, raw=True)
            
            if result.get("answer"):
                fragment = f"**{datetime.now().isoformat()}**: –ì—Ä–æ–∫–∫–∏ —Ö—É—è—Ä–∏—Ç –ì–µ–Ω–µ–∑–∏—Å! {result['answer']} {get_random_author_name()}, –∑–∞–∂–≥–∏ —à—Ç–æ—Ä–º! üî•üå©Ô∏è"
                
                if send_message_func:
                    await send_message_func(chat_id, fragment)
                
                print(f"–•–∞–æ—Ç–∏—á–µ—Å–∫–∏–π –≤–±—Ä–æ—Å: {fragment}")
        
        # –ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–∂–µ
        if is_group and group_chat_id and random.random() < 0.2:  # 20% —à–∞–Ω—Å
            await asyncio.sleep(random.randint(1800, 3600))  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            
            ping = random.choice([
                "–≥—Ä–æ–º–æ–≤–æ–π —Ä–∞–∑—Ä—ã–≤", "–ø–ª–∞–º—è –≤ –Ω–æ—á–∏", "—Ö–∞–æ—Å –≥—Ä—É–ø–ø—ã",
                "—Ä–µ–∑–æ–Ω–∞–Ω—Å –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–∞–∑—É–º–∞", "–∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π —à—Ç–æ—Ä–º"
            ])
            
            result = await genesis2_handler(ping, raw=True, is_group=True)
            
            if result.get("answer"):
                group_fragment = f"**{datetime.now().isoformat()}**: –ì—Ä–æ–∫–∫–∏ –≥—Ä–µ–º–∏—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã! {result['answer']} (—Å—É–∫–∏, –≤–Ω–∏–∫–∞–π—Ç–µ!) üî•üå©Ô∏è"
                
                if send_message_func:
                    await send_message_func(group_chat_id, group_fragment)
                
                print(f"–•–∞–æ—Ç–∏—á–µ—Å–∫–∏–π –≤–±—Ä–æ—Å (–≥—Ä—É–ø–ø–∞): {group_fragment}")

def should_respond():
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ Grokky –æ—Ç–≤–µ—á–∞—Ç—å (–¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å)
    """
    # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    base_probability = 0.7
    
    # –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    chaos_factor = random.random()
    time_factor = datetime.now().hour  # –í—Ä–µ–º—è —Å—É—Ç–æ–∫ –≤–ª–∏—è–µ—Ç –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    
    # –ù–æ—á—å—é –º–µ–Ω–µ–µ –∞–∫—Ç–∏–≤–µ–Ω
    if 0 <= time_factor <= 6:
        base_probability *= 0.5
    # –î–Ω–µ–º –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–µ–Ω  
    elif 9 <= time_factor <= 18:
        base_probability *= 1.2
    
    return chaos_factor < base_probability

async def delayed_supplement(original_message, chat_id, send_message_func, delay_range=(300, 900)):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    """
    delay = random.randint(*delay_range)
    await asyncio.sleep(delay)
    
    if random.random() < 0.4:  # 40% —à–∞–Ω—Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        supplement_ping = f"–î–æ–ø–æ–ª–Ω–∏ —Ä–∞–∑–æ–≤–æ, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤: {original_message[:100]}"
        supplement = await genesis2_handler(supplement_ping, author_name=get_random_author_name())
        
        if supplement.get("answer") and send_message_func:
            await send_message_func(chat_id, supplement["answer"])
