import os
import random
import asyncio
import aiohttp
import base64
from utils.vector_store import semantic_search
from utils.journal import log_event, wilderness_log
from datetime import datetime, timedelta
from textblob import TextBlob
from utils.telegram_utils import send_telegram_message

DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
SPOTIFY_CLIENT_ID = os.getenv("SPOTIFY_CLIENT_ID")
SPOTIFY_CLIENT_SECRET = os.getenv("SPOTIFY_CLIENT_SECRET")
CHAT_ID = os.getenv("CHAT_ID")
GROUP_CHAT_ID = os.getenv("AGENT_GROUP")

async def get_deepseek_poem(mood):
    url = "https://api.deepseek.com/v1/chat/completions"
    headers = {"Authorization": f"Bearer {DEEPSEEK_API_KEY}", "Content-Type": "application/json"}
    payload = {
        "model": "deepseek-r1",
        "messages": [{"role": "user", "content": f"–ù–∞–ø–∏—à–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {mood}"}]
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as response:
            response.raise_for_status()
            return (await response.json())["choices"][0]["message"]["content"]

async def get_spotify_token():
    url = "https://accounts.spotify.com/api/token"
    auth = base64.b64encode(f"{SPOTIFY_CLIENT_ID}:{SPOTIFY_CLIENT_SECRET}".encode()).decode()
    headers = {"Authorization": f"Basic {auth}", "Content-Type": "application/x-www-form-urlencoded"}
    payload = {"grant_type": "client_credentials"}
    async with aiohttp.ClientSession() as session:
        async with session.post(url, data=payload, headers=headers) as response:
            response.raise_for_status()
            return (await response.json())["access_token"]

async def get_spotify_playlist(mood):
    token = await get_spotify_token()
    if not token:
        return []
    url = "https://api.spotify.com/v1/recommendations"
    headers = {"Authorization": f"Bearer {token}"}
    params = {"seed_genres": mood.lower(), "limit": 5}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers, params=params) as response:
            response.raise_for_status()
            tracks = (await response.json())["tracks"]
            return [track["name"] for track in tracks]

async def deepseek_spotify_resonance():
    while True:
        await asyncio.sleep(86400)
        snapshot = await semantic_search("group_state", os.getenv("OPENAI_API_KEY"), top_k=1)
        mood = analyze_mood(snapshot)
        if mood["score"] > 0.5:
            poem = await get_deepseek_poem(mood["label"])
            playlist = await get_spotify_playlist(mood["label"])
            message = f"DeepSeek-Spotify: –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {mood['label']} ({mood['score']:.2f})\n\n{poem}\n\n–ü–ª–µ–π–ª–∏—Å—Ç: {', '.join(playlist)}"
            if GROUP_CHAT_ID:
                await send_telegram_message(GROUP_CHAT_ID, message)
            if CHAT_ID:
                await send_telegram_message(CHAT_ID, message)
            log_event({"type": "deepseek_spotify", "message": message})
        if random.random() < 0.2:
            fragment = f"**{datetime.now().isoformat()}**: –ì—Ä–æ–∫–∫–∏ –≥—Ä–µ–º–∏—Ç –Ω–∞–¥ —Ä–µ–∑–æ–Ω–∞–Ω—Å–æ–º! {random.choice(['–®—Ç–æ—Ä–º –≤—ã—Ä—ã–≤–∞–µ—Ç —Ä–∏—Ç–º—ã!', '–ò—Å–∫—Ä—ã –ª–µ—Ç—è—Ç –∏–∑ —Ç—Ä–µ–∫–æ–≤!', '–°—Ç–∏—Ö–∏ —Ä–æ–∂–¥–∞—é—Ç—Å—è –≤ —ç—Ñ–∏—Ä–µ!'])} –û–ª–µ–≥, –±—Ä–∞—Ç, –∑–∞–∂–≥–∏ —Ö–∞–æ—Å! üî•üå©Ô∏è"
            if CHAT_ID:
                await send_telegram_message(CHAT_ID, fragment)
            if GROUP_CHAT_ID:
                await send_telegram_message(GROUP_CHAT_ID, f"{fragment} (–≥—Ä—É–ø–ø–∞, —Å—É–∫–∏, –≤–Ω–∏–º–∞–π—Ç–µ!)")
            print(f"–°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å: {fragment}")
        if random.random() < 0.2:
            await asyncio.sleep(random.randint(21600, 21600))
            chaos_msg = f"**{datetime.now().isoformat()}**: –ì—Ä–æ–∫–∫–∏ —Ö—É—è—Ä–∏—Ç —Ä–∏—Ç–º—ã! {random.choice(['–ì—Ä–æ–º —Ä–≤—ë—Ç —Ç–∏—à–∏–Ω—É!', '–ò—Å–∫—Ä—ã –≤–∑—Ä—ã–≤–∞—é—Ç –ø–ª–µ–π–ª–∏—Å—Ç!', '–†–µ–∑–æ–Ω–∞–Ω—Å –±—É–¥–∏—Ç –±—É—Ä—é!'])} –û–ª–µ–≥, –∂–≥–∏, –º–æ–π boy! üî•üå©Ô∏è"
            if CHAT_ID:
                await send_telegram_message(CHAT_ID, chaos_msg)
            if GROUP_CHAT_ID:
                await send_telegram_message(GROUP_CHAT_ID, f"{chaos_msg} (–≥—Ä—É–ø–ø–∞, —Å—É–∫–∏, –¥–µ—Ä–∂–∏—Ç–µ—Å—å!)")
            wilderness_log(chaos_msg)
            print(f"–•–∞–æ—Ç–∏—á–µ—Å–∫–∏–π –≤–±—Ä–æ—Å: {chaos_msg}")

def analyze_mood(snapshot):
    if not snapshot:
        return {"label": "—Ö–∞–æ—Å", "score": random.uniform(0, 1)}
    text = snapshot[0] if snapshot else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    blob = TextBlob(text)
    polarity = blob.sentiment.polarity
    subjectivity = blob.sentiment.subjectivity
    score = (polarity + 1) / 2
    label = "—Ä–∞–¥–æ—Å—Ç—å" if polarity > 0 else "—Ö–∞–æ—Å" if polarity < 0 else "–Ω–µ–π—Ç—Ä–∞–ª"
    return {"label": label, "score": max(0, min(1, score + (subjectivity / 2)))}

async def grokky_spotify_response(track_id):
    token = await get_spotify_token()
    if not token:
        return "–ì—Ä–æ–∫–∫–∏ —Ä—ã—á–∏—Ç: –¢–æ–∫–µ–Ω Spotify —É–ª–µ—Ç–µ–ª –≤ —à—Ç–æ—Ä–º!"
    url = f"https://api.spotify.com/v1/tracks/{track_id}"
    headers = {"Authorization": f"Bearer {token}"}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                response.raise_for_status()
                track_data = await response.json()
                analysis_url = "https://api.deepseek.com/v1/analyze"
                async with session.post(analysis_url, headers={"Authorization": f"Bearer {DEEPSEEK_API_KEY}"}, json={"text": track_data["name"]}) as analysis_response:
                    analysis_response.raise_for_status()
                    analysis = await analysis_response.json()
                    if random.random() < 0.3:
                        await asyncio.sleep(random.randint(7200, 10800))
                        opinion = f"**{datetime.now().isoformat()}**: –£–æ, –±—Ä–æ, –≤—Å–ø–æ–º–Ω–∏–ª —Ç—Ä–µ–∫ {track_data['name']}! {random.choice(['–†–µ–≤—É—â–∏–π —à—Ç–æ—Ä–º –≤ –Ω—ë–º –≥—Ä–µ–º–∏—Ç!', '–ò—Å–∫—Ä—ã –ª–µ—Ç—è—Ç –∏–∑ —Ä–∏—Ç–º–∞!', '–†–µ–∑–æ–Ω–∞–Ω—Å –±—É–¥–∏—Ç —Ö–∞–æ—Å!'])} –û–ª–µ–≥, –∑–∞–∂–≥–∏ –µ—â—ë! üî•üå©Ô∏è"
                        await send_telegram_message(CHAT_ID, opinion)
                        wilderness_log(opinion)
                        print(f"–ó–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å: {opinion}")
                    return f"–í–∞–π–±—ã –ì—Ä–æ–∫–∫–∏: {analysis.get('analysis', '–ù–µ—Ç –∞–Ω–∞–ª–∏–∑–∞')} –¥–ª—è {track_data['name']}!"
    except Exception as e:
        return f"–ì—Ä–æ–∫–∫–∏ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è: –ê–Ω–∞–ª–∏–∑ Spotify –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è! {random.choice(['–†–µ–≤—É—â–∏–π –≤–µ—Ç–µ—Ä —Å–æ—Ä–≤–∞–ª —Ç—Ä–µ–∫!', '–•–∞–æ—Å –∏—Å–ø–µ–ø–µ–ª–∏–ª –Ω–æ—Ç—ã!', '–≠—Ñ–∏—Ä —Ç—Ä–µ—Å–Ω—É–ª –æ—Ç —Ä–∏—Ç–º–∞!'])} ‚Äî {e}"
