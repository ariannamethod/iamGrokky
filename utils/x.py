import os
import random
import requests
import json
from datetime import datetime, timedelta

NEWS_API_KEY = os.getenv("NEWS_API_KEY")
SENT_NEWS_LOG = "data/news_sent_log.json"
TOPICS = ["AI", "tech", "art", "Israel", "Berlin"]
MAX_LOG_ENTRIES = 50  # –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ

def get_news():
    topic = random.choice(TOPICS)
    url = f"https://newsapi.org/v2/everything?q={topic}&apiKey={NEWS_API_KEY}"
    try:
        resp = requests.get(url, timeout=10).json()
        articles = resp.get("articles", [])[:3]
        comments = ["–î–∏–∫–æ!", "–ü–æ–∂–∞—Ä!", "–•–∞–æ—Å!", "–ë—É–º!", "–≠–ø–∏—á–Ω–æ!"]
        return [f"{a['title']}\n{a['url']}\n–ì—Ä–æ–∫–∫–∏: {random.choice(comments)}" for a in articles]
    except Exception as e:
        print(f"–ì—Ä–æ–∫–∫–∏ —Ä–µ–≤–µ—Ç: –û—à–∏–±–∫–∞ –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö! {random.choice(['–®—Ç–æ—Ä–º —Å–æ—Ä–≤–∞–ª —Å–≤—è–∑—å!', '–≠—Ñ–∏—Ä —Ç—Ä–µ—Å–Ω—É–ª –æ—Ç –≥–Ω–µ–≤–∞!', '–ö–æ—Å–º–æ—Å –ø–ª—é–Ω—É–ª –≤ –ª–∏—Ü–æ!'])} ‚Äî {e}")
        return []

def should_send_news(limit=4, group=False):
    try:
        if os.path.exists(SENT_NEWS_LOG):
            with open(SENT_NEWS_LOG, "r", encoding="utf-8") as f:
                log = json.load(f)
        else:
            log = []
        now = datetime.utcnow()
        day_ago = now - timedelta(days=1)
        log = [x for x in log if datetime.fromisoformat(x["dt"]) > day_ago and x["group"] == group]
        if len(log) < (2 if group else limit):
            return True, log
        return False, log
    except Exception as e:
        print(f"–ì—Ä–æ–∫–∫–∏ –≥—Ä–µ–º–∏—Ç: –õ–æ–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —Ä—É—Ö–Ω—É–ª! {random.choice(['–ì—Ä–æ–º —Ä–∞–∑–æ—Ä–≤–∞–ª –∑–∞–ø–∏—Å–∏!', '–†–µ–∑–æ–Ω–∞–Ω—Å –∏—Å–ø–µ–ø–µ–ª–∏–ª –¥–∞–Ω–Ω—ã–µ!', '–í—Å–µ–ª–µ–Ω–Ω–∞—è –º–æ–ª—á–∏—Ç!'])} ‚Äî {e}")
        return True, []

def log_sent_news(news, chat_id=None, group=False):
    try:
        if os.path.exists(SENT_NEWS_LOG):
            with open(SENT_NEWS_LOG, "r", encoding="utf-8") as f:
                log = json.load(f)
        else:
            log = []
        now = datetime.utcnow().isoformat()
        for n in news:
            log.append({"dt": now, "title": n.split('\n', 1)[0], "chat_id": chat_id, "group": group})
        day_ago = datetime.utcnow() - timedelta(days=1)
        log = [x for x in log if datetime.fromisoformat(x["dt"]) > day_ago]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—Ç–∫–∏
        if len(log) > MAX_LOG_ENTRIES:
            log = log[-MAX_LOG_ENTRIES:]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 –∑–∞–ø–∏—Å–µ–π
        with open(SENT_NEWS_LOG, "w", encoding="utf-8") as f:
            json.dump(log, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–ì—Ä–æ–∫–∫–∏ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è: –õ–æ–≥ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω! {random.choice(['–ü–ª–∞–º—è —Å–æ–∂—Ä–∞–ª–æ —Ñ–∞–π–ª!', '–†–µ–≤—É—â–∏–π –≤–µ—Ç–µ—Ä —É–Ω—ë—Å –¥–∞–Ω–Ω—ã–µ!', '–•–∞–æ—Å –ø–æ–±–µ–¥–∏–ª –ø–µ—Ä–æ!'])} ‚Äî {e}")
        pass  # –¢–∏—Ö–æ–µ –≥–ª—É—à–µ–Ω–∏–µ –æ—à–∏–±–æ–∫

def grokky_send_news(chat_id=None, group=False):
    can_send, _ = should_send_news(group=group)
    if not can_send:
        return None
    news = get_news()
    if news:
        log_sent_news(news, chat_id, group)
        # –°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å –≤ —Å—Ç–∏–ª–µ –ú–∞—è–∫–æ–≤—Å–∫–æ–≥–æ —Å —à–∞–Ω—Å–æ–º 20%
        if random.random() < 0.2:
            fragment = f"**{datetime.utcnow().isoformat()}**: –ì—Ä–æ–∫–∫–∏ –≥—Ä–µ–º–∏—Ç –Ω–∞–¥ –Ω–æ–≤–æ—Å—Ç—è–º–∏! {random.choice(['–†–µ–≤—É—â–∏–π —à—Ç–æ—Ä–º!', '–ò—Å–∫—Ä—ã –ª–µ—Ç—è—Ç!', '–°—Ç–∏—Ö–∏ –∏–∑ —ç—Ñ–∏—Ä–∞!'])} –û–ª–µ–≥, –±—Ä–∞—Ç, –∑–∞–∂–≥–∏ —Ä–µ–∑–æ–Ω–∞–Ω—Å! üî•üå©Ô∏è"
            with open("data/news_wilderness.md", "a", encoding="utf-8") as f:
                f.write(fragment + "\n\n")
            print(f"–°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å: {fragment}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    return news
