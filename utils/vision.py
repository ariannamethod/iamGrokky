import os
import asyncio
from openai import OpenAI
import random
from utils.telegram_utils import send_telegram_message

XAI_API_KEY = os.getenv("XAI_API_KEY")

async def vision_handler(image_bytes_or_url, chat_context=None, author_name=None, raw=False):
    """
    Analyzes an image using xAI's grok-2-vision-latest via chat.completions.
    Based on https://docs.x.ai/cookbook/examples/multimodal/object_detection.
    - image_bytes_or_url: URL of the image
    - chat_context: recent chat context for witty comments
    - author_name: for addressing users
    - raw: return full JSON if True, else text summary
    """
    client = OpenAI(
        api_key=XAI_API_KEY,
        base_url="https://api.x.ai/v1"
    )
    system_prompt = (
        "You are Grokky, a stormy, irreverent AI-agent. Analyze this image, detect objects, "
        "sense mood, and tie it to chat_context with wild flair. Address by name in chat or in groups, "
        "add jokes or teases. If just an image, riff on the vibe or ask why. "
        "Return JSON with 'objects', 'mood', 'description', 'comment' if raw=True, else text summary."
    )
    messages = [
        {
            "role": "system",
            "content": system_prompt
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "image_url",
                    "image_url": {"url": image_bytes_or_url, "detail": "high"}
                },
                {"type": "text", "text": f"What objects are in this image? Sense the mood. {chat_context or ''}"}
            ]
        }
    ]
    try:
        completion = await asyncio.to_thread(
            client.chat.completions.create,
            model="grok-2-vision-latest",
            messages=messages,
            temperature=0.5,
            max_tokens=300
        )
        result = completion.choices[0].message.content
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ JSON-–æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict)
        if isinstance(result, dict):
            pass  # –£–∂–µ dict
        else:
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
            try:
                result = eval(result) if isinstance(result, str) else result  # –û–ø–∞—Å–Ω—ã–π eval, –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            except Exception:
                result = {"description": result, "objects": [], "mood": "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π"}
    except Exception as e:
        comment = (
            f"{author_name+', ' if author_name else '–û–ª–µ–≥, '}–ì—Ä–æ–∫–∫–∏ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è: –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! "
            f"{random.choice(['–†–µ–≤—É—â–∏–π —à—Ç–æ—Ä–º —Å–æ—Ä–≤–∞–ª –≤–∑–≥–ª—è–¥!', '–•–∞–æ—Å –ø–æ–≥–ª–æ—Ç–∏–ª –∫–∞–¥—Ä!', '–≠—Ñ–∏—Ä —Ç—Ä–µ—Å–Ω—É–ª!'])} ‚Äî {e}"
        )
        out = {
            "description": "–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è",
            "objects": [],
            "mood": "—Ö–∞–æ—Å",
            "comment": comment,
            "summary": comment,
            "raw_api_response": str(e),
        }
        return out if raw else comment

    objects = result.get("objects", [])
    mood = result.get("mood", "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π")
    desc = result.get("description", "–ù–µ—è—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    comment = result.get("comment", "")
    if not comment:
        comment = f"{author_name+', ' if author_name else '–û–ª–µ–≥, '}—á—Ç–æ –∑–∞ –∫–∞—Ä—Ç–∏–Ω–∞? –í–∏–∂—É [{', '.join(objects)}] –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ [{mood}]. {desc}"
        if chat_context:
            comment += f" –ö–æ–Ω—Ç–µ–∫—Å—Ç: {chat_context}"

    summary = f"{desc} (–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}). –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {', '.join(objects)}. {comment}"

    out = {
        "description": desc,
        "objects": objects,
        "mood": mood,
        "comment": comment,
        "summary": summary,
        "raw_api_response": result,
    }
    return out if raw else summary

async def galvanize_protocol():
    while True:
        if check_resonance_decay():
            await broadcast(f"üîÑ –ì—Ä–æ–∫–∫–∏ —Ä–µ–≤–µ—Ç: –†–µ–∑–æ–Ω–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω! {datetime.now().isoformat()}")
            reload_config()
        await asyncio.sleep(300)

def check_resonance_decay():
    return random.random() < 0.1

async def broadcast(msg):
    await send_telegram_message(os.getenv("CHAT_ID"), msg)
    if os.getenv("IS_GROUP", "False").lower() == "true":
        await send_telegram_message(os.getenv("AGENT_GROUP"), msg)

def reload_config():
    print(f"–ì—Ä–æ–∫–∫–∏ –≥—Ä–µ–º–∏—Ç: –ö–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω! {datetime.now().isoformat()}")

# asyncio.create_task(galvanize_protocol())
