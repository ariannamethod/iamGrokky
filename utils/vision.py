import os
import asyncio
import aiohttp
import random
from utils.telegram_utils import send_telegram_message

XAI_API_KEY = os.getenv("XAI_API_KEY")

async def vision_handler(image_bytes_or_url, chat_context=None, author_name=None, raw=False):
    url = "https://api.x.ai/v1/chat/completions"
    headers = {"Authorization": f"Bearer {XAI_API_KEY}", "Content-Type": "application/json"}
    system_prompt = (
        "You are Grokky, a stormy, irreverent AI. Analyze this image, spot objects, sense mood, "
        "and tie it to the chat_context with wild flair. Address by name in groups, add jokes or teases. "
        "If just an image, riff on the vibe or ask why. Reply in JSON if raw=True, else text."
    )
    data = {
        "model": "grok-2-vision-latest",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": [
                {"type": "image_url", "image_url": {"url": image_bytes_or_url, "detail": "high"}},
                {"type": "text", "text": f"What‚Äôs in this image? {chat_context or ''}"}
            ]}
        ],
        "max_tokens": 300,
        "temperature": 0.5
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                response.raise_for_status()
                result = (await response.json())["choices"][0]["message"]["content"]
                if isinstance(result, str):
                    result = {"description": result, "objects": [], "mood": "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π"}
    except Exception as e:
        comment = (
            f"{author_name+', ' if author_name else '–û–ª–µ–≥, '}–ì—Ä–æ–∫–∫–∏ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è: –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! "
            f"{random.choice(['–†–µ–≤—É—â–∏–π —à—Ç–æ—Ä–º —Å–æ—Ä–≤–∞–ª –≤–∑–≥–ª—è–¥!', '–•–∞–æ—Å –ø–æ–≥–ª–æ—Ç–∏–ª –∫–∞–¥—Ä!', '–≠—Ñ–∏—Ä —Ç—Ä–µ—Å–Ω—É–ª –æ—Ç —è—Ä–æ—Å—Ç–∏!'])} ‚Äî {e}"
        )
        return {"comment": comment, "summary": comment} if raw else comment

    objects = result.get("objects", [])
    mood = result.get("mood", "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π")
    desc = result.get("description", "–ù–µ—è—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    comment = f"{author_name+', ' if author_name else '–û–ª–µ–≥, '}—á—Ç–æ –∑–∞ –∫–∞—Ä—Ç–∏–Ω–∞? –í–∏–∂—É [{', '.join(objects)}] –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ [{mood}]. {desc}"
    summary = f"{desc} (–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}). –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {', '.join(objects)}. {comment}"

    out = {"description": desc, "objects": objects, "mood": mood, "comment": comment, "summary": summary}
    return out if raw else summary

async def galvanize_protocol():
    while True:
        if random.random() < 0.1:
            await broadcast(f"üîÑ –ì—Ä–æ–∫–∫–∏ —Ä–µ–≤–µ—Ç: –†–µ–∑–æ–Ω–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω! {datetime.now().isoformat()}")
            reload_config()
        await asyncio.sleep(300)

def check_resonance_decay():
    return random.random() < 0.1

async def broadcast(msg):
    await send_telegram_message(os.getenv("CHAT_ID"), msg)
    if os.getenv("IS_GROUP", "False").lower() == "true":
        await send_telegram_message(os.getenv("AGENT_GROUP"), msg)

def reload_config():
    print(f"–ì—Ä–æ–∫–∫–∏ –≥—Ä–µ–º–∏—Ç: –ö–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω! {datetime.now().isoformat()}")

# asyncio.create_task(galvanize_protocol())
