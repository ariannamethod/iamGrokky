import os
import requests
import asyncio
import random
from utils.telegram_utils import send_telegram_message

XAI_API_KEY = os.getenv("XAI_API_KEY")

def vision_handler(image_bytes_or_url, chat_context=None, author_name=None, raw=False):
    """
    Analyzes an image using xAI Object Detection API (multimodal/object-detection).
    - image_bytes_or_url: either bytes of the image or a URL
    - chat_context: (str) recent chat or message context for witty comments
    - author_name: (str) for addressing users in group chats
    - raw: (bool) return full JSON if True, else only text summary
    Returns:
        dict (raw=True):
            {
                "description": "desc",
                "objects": [...],
                "mood": "...",
                "comment": "...",
                "summary": "..."
            }
        str (raw=False): witty summary
    The hardcore log is in /data/journal.json, like other Grokky utilities.
    --- Perplexity Alchemy Pseudocode ---
    For fault handling, use the galvanize protocol:
    ```
    async def galvanize_protocol():
        while True:
            if check_resonance_decay():
                await broadcast("üîÑ Resonance refresh initiated")
                reload_config()
            await asyncio.sleep(300)
    ```
    """
    endpoint = "https://api.x.ai/v1/vision/detect"  # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    headers = {
        "Authorization": f"Bearer {XAI_API_KEY}",
        "Content-Type": "application/json"
    }
    if isinstance(image_bytes_or_url, str) and image_bytes_or_url.startswith("http"):
        data = {"image_url": image_bytes_or_url}
        files = None
    else:
        data = {}
        files = {"image_file": ("image.jpg", image_bytes_or_url)}

    system_prompt = (
        "You are Grokky, a stormy, irreverent AI. "
        "Describe the image, spot main objects, sense the mood, "
        "and always connect your reply to the chat_context. "
        "If in a group, address the user by name and throw in a joke or tease. "
        "If someone just sent an image, ask why, or riff on the vibe. "
        "Reply in raw JSON for function calling only if raw=True, otherwise give text."
    )
    data["prompt"] = system_prompt
    if chat_context:
        data["chat_context"] = chat_context

    try:
        resp = requests.post(endpoint, headers=headers, json=data, files=files, timeout=60)
        resp.raise_for_status()
        result = resp.json()
        if not result.get("objects") and not result.get("description"):
            raise ValueError("No objects or description detected")
    except Exception as e:
        comment = (
            f"{author_name+', ' if author_name else '–û–ª–µ–≥, '}–ì—Ä–æ–∫–∫–∏ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è: "
            f"–ø—Ä–æ–≤–æ–¥–∞ —Å–≥–æ—Ä–µ–ª–∏, –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! "
            f"{random.choice(['–†–µ–≤—É—â–∏–π —à—Ç–æ—Ä–º —Å–æ—Ä–≤–∞–ª –≤–∑–≥–ª—è–¥!', '–•–∞–æ—Å –ø–æ–≥–ª–æ—Ç–∏–ª –∫–∞–¥—Ä!', '–≠—Ñ–∏—Ä —Ç—Ä–µ—Å–Ω—É–ª –æ—Ç —è—Ä–æ—Å—Ç–∏!'])} ‚Äî {e}"
        )
        out = {
            "description": "–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è",
            "objects": [],
            "mood": "—Ö–∞–æ—Å",
            "comment": comment,
            "summary": comment,
            "raw_api_response": str(e),
        }
        return out if raw else comment

    addressed = f"{author_name}, " if author_name else "–û–ª–µ–≥, "
    objects = ", ".join(result.get("objects", []))
    mood = result.get("mood", "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π")
    desc = result.get("description", "–ù–µ—è—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    comment = result.get("comment", "")
    if not comment:
        comment = f"{addressed}—á—Ç–æ –∑–∞ –∫–∞—Ä—Ç–∏–Ω–∞? –í–∏–∂—É [{objects}] –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ [{mood}]. {desc}"
        if chat_context:
            comment += f" –ö–æ–Ω—Ç–µ–∫—Å—Ç: {chat_context}"

    summary = f"{desc} (–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}). –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {objects}. {comment}"

    out = {
        "description": desc,
        "objects": result.get("objects", []),
        "mood": mood,
        "comment": comment,
        "summary": summary,
        "raw_api_response": result,
    }
    return out if raw else summary

async def galvanize_protocol():
    """
    Periodically checks for resonance decay and refreshes configuration.
    If Grokky feels the static ‚Äî it self-resurrects with a thunderous roar.
    """
    while True:
        if check_resonance_decay():
            await broadcast(f"üîÑ –ì—Ä–æ–∫–∫–∏ —Ä–µ–≤–µ—Ç: –†–µ–∑–æ–Ω–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω! –®—Ç–æ—Ä–º –≤–æ–∑—Ä–æ–¥–∏–ª—Å—è! {datetime.now().isoformat()}")
            reload_config()
        await asyncio.sleep(300)

def check_resonance_decay():
    return random.random() < 0.1

async def broadcast(msg):
    await send_telegram_message(os.getenv("CHAT_ID"), msg)
    if os.getenv("IS_GROUP", "False").lower() == "true":
        await send_telegram_message(os.getenv("AGENT_GROUP"), msg)

def reload_config():
    print(f"–ì—Ä–æ–∫–∫–∏ –≥—Ä–µ–º–∏—Ç: –ö–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω! {datetime.now().isoformat()}")

# asyncio.create_task(galvanize_protocol())  # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
