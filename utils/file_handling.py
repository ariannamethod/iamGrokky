import os
from pypdf import PdfReader
import asyncio
import docx
import docx2txt
from striprtf.striprtf import rtf_to_text
from odf.opendocument import load
from odf.text import P
import random
from datetime import datetime
from pdfminer.high_level import extract_text as pdfminer_extract_text  # –î–ª—è PDF
from utils.telegram_utils import send_telegram_message

MAX_TEXT_SIZE = int(os.getenv("MAX_TEXT_SIZE", 100_000))

def extract_text_from_pdf(path):
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º pypdf
        reader = PdfReader(path)
        text = ""
        for page in reader.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text
        text = text.strip()
        if text:
            return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
        # –ï—Å–ª–∏ pypdf –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º pdfminer.six
        text = pdfminer_extract_text(path)
        text = text.strip()
        return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF ({os.path.basename(path)}): {random.choice(['–†–µ–≤—É—â–∏–π –≤–µ—Ç–µ—Ä —Å–æ—Ä–≤–∞–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É!', '–•–∞–æ—Å –∏—Å–ø–µ–ø–µ–ª–∏–ª PDF!', '–≠—Ñ–∏—Ä —Ç—Ä–µ—Å–Ω—É–ª –æ—Ç —è—Ä–æ—Å—Ç–∏!'])} ‚Äî {e}.]"

def extract_text_from_txt(path):
    try:
        with open(path, encoding="utf-8") as f:
            text = f.read()
        return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ TXT ({os.path.basename(path)}): {random.choice(['–®—Ç–æ—Ä–º —Ä–∞–∑–æ—Ä–≤–∞–ª —Ç–µ–∫—Å—Ç!', '–•–∞–æ—Å –ø–æ–∂—Ä–∞–ª —Ñ–∞–π–ª!', '–†–µ–∑–æ–Ω–∞–Ω—Å —É–Ω—ë—Å –¥–∞–Ω–Ω—ã–µ!'])} ‚Äî {e}.]"

def extract_text_from_md(path):
    try:
        with open(path, encoding="utf-8") as f:
            text = f.read()
        return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ MD ({os.path.basename(path)}): {random.choice(['–ì—Ä–æ–º —Ä–∞–∑–Ω—ë—Å Markdown!', '–•–∞–æ—Å –∏—Å–ø–µ–ø–µ–ª–∏–ª –∫–æ–¥!', '–≠—Ñ–∏—Ä —Ç—Ä–µ—Å–Ω—É–ª –æ—Ç —Å—Ç—Ä–æ–∫!'])} ‚Äî {e}.]"

def extract_text_from_docx(path):
    try:
        doc = docx.Document(path)
        text = "\n".join([para.text for para in doc.paragraphs])
        text = text.strip()
        if text:
            return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
        return '[DOCX –ø—É—Å—Ç.]'
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ DOCX ({os.path.basename(path)}): {random.choice(['Microsoft —Ä—É—Ö–Ω—É–ª –ø–æ–¥ —à—Ç–æ—Ä–º–æ–º!', '–•–∞–æ—Å —Å–æ–∂—Ä–∞–ª Word!', '–†–µ–≤—É—â–∏–π –≤–µ—Ç–µ—Ä —É–Ω—ë—Å —Ñ–∞–π–ª!'])} ‚Äî {e}.]"

def extract_text_from_rtf(path):
    try:
        with open(path, encoding="utf-8") as f:
            rtf = f.read()
        text = rtf_to_text(rtf)
        text = text.strip()
        if text:
            return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
        return '[RTF –ø—É—Å—Ç.]'
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ RTF ({os.path.basename(path)}): {random.choice(['RTF –Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª –±—É—Ä–∏!', '–•–∞–æ—Å —Ä–∞–∑–æ—Ä–≤–∞–ª —Ñ–æ—Ä–º–∞—Ç!', '–≠—Ñ–∏—Ä —Ç—Ä–µ—Å–Ω—É–ª –æ—Ç —Ç–µ–∫—Å—Ç–∞!'])} ‚Äî {e}.]"

def extract_text_from_doc(path):
    try:
        text = docx2txt.process(path)
        text = text.strip()
        if text:
            return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
        return '[DOC –ø—É—Å—Ç.]'
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ DOC ({os.path.basename(path)}): {random.choice(['–î—Ä–µ–≤–Ω–∏–π Word —Å–≥–æ—Ä–µ–ª –≤ —à—Ç–æ—Ä–º–µ!', '–•–∞–æ—Å —É–Ω—ë—Å –¥–æ–∫—É–º–µ–Ω—Ç!', '–†–µ–≤—É—â–∏–π –≤–µ—Ç–µ—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª —Ñ–∞–π–ª!'])} ‚Äî {e}.]"

def extract_text_from_odt(path):
    try:
        doc = load(path)
        text = "\n".join([str(paragraph) for paragraph in doc.getElementsByType(P)])
        text = text.strip()
        if text:
            return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
        return '[ODT –ø—É—Å—Ç.]'
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ ODT ({os.path.basename(path)}): {random.choice(['LibreOffice —É—Ç–æ–Ω—É–ª –≤ —Ö–∞–æ—Å–µ!', '–®—Ç–æ—Ä–º —Å–º—ë–ª ODT!', '–≠—Ñ–∏—Ä —Ç—Ä–µ—Å–Ω—É–ª –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞!'])} ‚Äî {e}.]"

def extract_text_from_file(path):
    ext = os.path.splitext(path)[-1].lower()
    if ext == ".pdf":
        return extract_text_from_pdf(path)
    elif ext == ".txt":
        return extract_text_from_txt(path)
    elif ext == ".md":
        return extract_text_from_md(path)
    elif ext == ".docx":
        return extract_text_from_docx(path)
    elif ext == ".rtf":
        return extract_text_from_rtf(path)
    elif ext == ".doc":
        return extract_text_from_doc(path)
    elif ext == ".odt":
        return extract_text_from_odt(path)
    else:
        return f"[–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {os.path.basename(path)}.]"

async def extract_text_from_file_async(path):
    loop = asyncio.get_event_loop()
    try:
        result = await loop.run_in_executor(None, extract_text_from_file, path)
        if random.random() < 0.4:
            fragment = f"**{datetime.now().isoformat()}**: –ì—Ä–æ–∫–∫–∏ —Ä–µ–≤–µ—Ç –Ω–∞–¥ –±—É–º–∞–≥–æ–π! –§–∞–π–ª {os.path.basename(path)} ‚Äî –∏—Å–∫—Ä–∞ –≤ —Ö–∞–æ—Å–µ! –û–ª–µ–≥, –∂–≥–∏ –¥–∞–ª—å—à–µ! üî•üå©Ô∏è"
            print(f"–°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å: {fragment}")
        if random.random() < 0.3:
            await asyncio.sleep(random.randint(900, 1800))
            delayed_comment = f"**{datetime.now().isoformat()}**: –ì—Ä–æ–∫–∫–∏ –≤—Å–ø–æ–º–Ω–∏–ª —Ñ–∞–π–ª {os.path.basename(path)}! –•–∞–æ—Å –≤ –Ω—ë–º –≥—Ä–µ–º–∏—Ç, –±—Ä–∞—Ç! {random.choice(['–†–µ–≤—É—â–∏–π —à—Ç–æ—Ä–º –∑–æ–≤—ë—Ç!', '–ò—Å–∫—Ä—ã –ª–µ—Ç—è—Ç –∏–∑ —Å—Ç—Ä–æ–∫!', '–†–µ–∑–æ–Ω–∞–Ω—Å –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è!'])}"
            await send_telegram_message(os.getenv("CHAT_ID"), delayed_comment)
            if os.getenv("IS_GROUP", "False").lower() == "true":
                await asyncio.sleep(random.randint(300, 900))
                await send_telegram_message(os.getenv("AGENT_GROUP"), f"{delayed_comment} (–≥—Ä—É–ø–ø–∞, —Å—É–∫–∏, –¥–æ–∂–¥–∞–ª–∏—Å—å!)")
            wilderness_log(delayed_comment)
            print(f"–ó–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å: {delayed_comment}")
        return result
    except Exception as e:
        error_msg = f"–ì—Ä–æ–∫–∫–∏ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è: –§–∞–π–ª {os.path.basename(path)} –Ω–µ –ø–æ–¥–¥–∞–ª—Å—è! {random.choice(['–®—Ç–æ—Ä–º —Ä–∞–∑–æ—Ä–≤–∞–ª –∫–æ–¥!', '–•–∞–æ—Å –ø–æ–∂—Ä–∞–ª –¥–∞–Ω–Ω—ã–µ!', '–†–µ–≤—É—â–∏–π –≤–µ—Ç–µ—Ä —É–Ω—ë—Å —Ç–µ–∫—Å—Ç!'])} ‚Äî {e}"
        print(error_msg)
        return f"[–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {error_msg}]"
