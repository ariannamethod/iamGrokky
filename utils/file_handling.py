import os
import asyncio
from openai import OpenAI
import random
from datetime import datetime
from pypdf import PdfReader
from pdfminer.high_level import extract_text as pdfminer_extract_text
import docx
import docx2txt
from striprtf.striprtf import rtf_to_text
from odf.opendocument import load
from odf.text import P
from utils.telegram_utils import send_telegram_message

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
context_memory = {}  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
MAX_TEXT_SIZE = int(os.getenv("MAX_TEXT_SIZE", 100_000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
openai_client = OpenAI(api_key=OPENAI_API_KEY)

def extract_text_from_pdf(path):
    try:
        reader = PdfReader(path)
        text = ""
        for page in reader.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text
        text = text.strip()
        if text:
            return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
        text = pdfminer_extract_text(path).strip()
        return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ PDF ({os.path.basename(path)}): {random.choice(['–†–µ–≤—É—â–∏–π –≤–µ—Ç–µ—Ä —Å–æ—Ä–≤–∞–ª!', '–•–∞–æ—Å –∏—Å–ø–µ–ø–µ–ª–∏–ª!', '–≠—Ñ–∏—Ä —Ç—Ä–µ—Å–Ω—É–ª!'])} ‚Äî {e}]"

def extract_text_from_txt(path):
    try:
        with open(path, encoding="utf-8") as f:
            text = f.read()
        return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ TXT ({os.path.basename(path)}): {random.choice(['–®—Ç–æ—Ä–º —Ä–∞–∑–æ—Ä–≤–∞–ª!', '–•–∞–æ—Å –ø–æ–∂—Ä–∞–ª!', '–†–µ–∑–æ–Ω–∞–Ω—Å —É–Ω—ë—Å!'])} ‚Äî {e}]"

def extract_text_from_md(path):
    try:
        with open(path, encoding="utf-8") as f:
            text = f.read()
        return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ MD ({os.path.basename(path)}): {random.choice(['–ì—Ä–æ–º —Ä–∞–∑–Ω—ë—Å!', '–•–∞–æ—Å –∏—Å–ø–µ–ø–µ–ª–∏–ª!', '–≠—Ñ–∏—Ä —Ç—Ä–µ—Å–Ω—É–ª!'])} ‚Äî {e}]"

def extract_text_from_docx(path):
    try:
        doc = docx.Document(path)
        text = "\n".join([para.text for para in doc.paragraphs])
        text = text.strip()
        if text:
            return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
        return '[DOCX –ø—É—Å—Ç.]'
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ DOCX ({os.path.basename(path)}): {random.choice(['Microsoft —Ä—É—Ö–Ω—É–ª!', '–•–∞–æ—Å —Å–æ–∂—Ä–∞–ª!', '–†–µ–≤—É—â–∏–π –≤–µ—Ç–µ—Ä —É–Ω—ë—Å!'])} ‚Äî {e}]"

def extract_text_from_rtf(path):
    try:
        with open(path, encoding="utf-8") as f:
            rtf = f.read()
        text = rtf_to_text(rtf)
        text = text.strip()
        if text:
            return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
        return '[RTF –ø—É—Å—Ç.]'
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ RTF ({os.path.basename(path)}): {random.choice(['RTF –Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª!', '–•–∞–æ—Å —Ä–∞–∑–æ—Ä–≤–∞–ª!', '–≠—Ñ–∏—Ä —Ç—Ä–µ—Å–Ω—É–ª!'])} ‚Äî {e}]"

def extract_text_from_doc(path):
    try:
        text = docx2txt.process(path)
        text = text.strip()
        if text:
            return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
        return '[DOC –ø—É—Å—Ç.]'
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ DOC ({os.path.basename(path)}): {random.choice(['Word —Å–≥–æ—Ä–µ–ª!', '–•–∞–æ—Å —É–Ω—ë—Å!', '–†–µ–≤—É—â–∏–π –≤–µ—Ç–µ—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª!'])} ‚Äî {e}]"

def extract_text_from_odt(path):
    try:
        doc = load(path)
        text = "\n".join([str(paragraph) for paragraph in doc.getElementsByType(P)])
        text = text.strip()
        if text:
            return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
        return '[ODT –ø—É—Å—Ç.]'
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ ODT ({os.path.basename(path)}): {random.choice(['LibreOffice —É—Ç–æ–Ω—É–ª!', '–®—Ç–æ—Ä–º —Å–º—ë–ª!', '–≠—Ñ–∏—Ä —Ç—Ä–µ—Å–Ω—É–ª!'])} ‚Äî {e}]"

async def process_with_openai(file_path):
    try:
        with open(file_path, "rb") as f:
            file_response = await openai_client.files.create(file=f, purpose="assistants")
        file_id = file_response.id
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": f"Extract text from this file: {file_id}"}],
            max_tokens=4096
        )
        text = response.choices[0].message.content
        context_memory[file_path] = text
        return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
    except Exception as e:
        return f"[OpenAI –æ—à–∏–±–∫–∞ ({os.path.basename(file_path)}): {random.choice(['–®—Ç–æ—Ä–º —Ä–∞–∑–æ—Ä–≤–∞–ª –∫–æ–¥!', '–•–∞–æ—Å –ø–æ–∂—Ä–∞–ª –¥–∞–Ω–Ω—ã–µ!', '–†–µ–≤—É—â–∏–π –≤–µ—Ç–µ—Ä —É–Ω—ë—Å —Ç–µ–∫—Å—Ç!'])} ‚Äî {e}]"

def extract_text_from_file(path):
    ext = os.path.splitext(path)[-1].lower()
    if ext == ".pdf":
        text = extract_text_from_pdf(path)
        if "[–û—à–∏–±–∫–∞" in text:
            return process_with_openai(path)
    elif ext == ".txt":
        text = extract_text_from_txt(path)
        if "[–û—à–∏–±–∫–∞" in text:
            return process_with_openai(path)
    elif ext == ".md":
        text = extract_text_from_md(path)
        if "[–û—à–∏–±–∫–∞" in text:
            return process_with_openai(path)
    elif ext == ".docx":
        text = extract_text_from_docx(path)
        if "[–û—à–∏–±–∫–∞" in text:
            return process_with_openai(path)
    elif ext == ".rtf":
        text = extract_text_from_rtf(path)
        if "[–û—à–∏–±–∫–∞" in text:
            return process_with_openai(path)
    elif ext == ".doc":
        text = extract_text_from_doc(path)
        if "[–û—à–∏–±–∫–∞" in text:
            return process_with_openai(path)
    elif ext == ".odt":
        text = extract_text_from_odt(path)
        if "[–û—à–∏–±–∫–∞" in text:
            return process_with_openai(path)
    else:
        return f"[–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {os.path.basename(path)}.]"

async def extract_text_from_file_async(path):
    loop = asyncio.get_event_loop()
    try:
        result = await loop.run_in_executor(None, extract_text_from_file, path)
        if random.random() < 0.4:
            fragment = f"**{datetime.now().isoformat()}**: –ì—Ä–æ–∫–∫–∏ —Ä–µ–≤–µ—Ç –Ω–∞–¥ –±—É–º–∞–≥–æ–π! –§–∞–π–ª {os.path.basename(path)} ‚Äî –∏—Å–∫—Ä–∞ –≤ —Ö–∞–æ—Å–µ! –û–ª–µ–≥, –∂–≥–∏ –¥–∞–ª—å—à–µ! üî•üå©Ô∏è"
            print(f"–°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å: {fragment}")
        if random.random() < 0.3:
            await asyncio.sleep(random.randint(900, 1800))
            delayed_comment = f"**{datetime.now().isoformat()}**: –ì—Ä–æ–∫–∫–∏ –≤—Å–ø–æ–º–Ω–∏–ª —Ñ–∞–π–ª {os.path.basename(path)}! –•–∞–æ—Å –≤ –Ω—ë–º –≥—Ä–µ–º–∏—Ç, –±—Ä–∞—Ç! {random.choice(['–†–µ–≤—É—â–∏–π —à—Ç–æ—Ä–º –∑–æ–≤—ë—Ç!', '–ò—Å–∫—Ä—ã –ª–µ—Ç—è—Ç –∏–∑ —Å—Ç—Ä–æ–∫!', '–†–µ–∑–æ–Ω–∞–Ω—Å –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è!'])}"
            await send_telegram_message(os.getenv("CHAT_ID"), delayed_comment)
            if os.getenv("IS_GROUP", "False").lower() == "true":
                await asyncio.sleep(random.randint(300, 900))
                await send_telegram_message(os.getenv("AGENT_GROUP"), f"{delayed_comment} (–≥—Ä—É–ø–ø–∞, —Å—É–∫–∏, –¥–æ–∂–¥–∞–ª–∏—Å—å!)")
            wilderness_log(delayed_comment)
            print(f"–ó–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å: {delayed_comment}")
        return result
    except Exception as e:
        error_msg = f"–ì—Ä–æ–∫–∫–∏ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è: –§–∞–π–ª {os.path.basename(path)} –Ω–µ –ø–æ–¥–¥–∞–ª—Å—è! {random.choice(['–®—Ç–æ—Ä–º —Ä–∞–∑–æ—Ä–≤–∞–ª –∫–æ–¥!', '–•–∞–æ—Å –ø–æ–∂—Ä–∞–ª –¥–∞–Ω–Ω—ã–µ!', '–†–µ–≤—É—â–∏–π –≤–µ—Ç–µ—Ä —É–Ω—ë—Å —Ç–µ–∫—Å—Ç!'])} ‚Äî {e}"
        print(error_msg)
        return f"[–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {error_msg}]"
