import os
from pypdf import PdfReader
import asyncio
import docx
import textract
from striprtf.striprtf import rtf_to_text
from odf.opendocument import load
from odf.text import P

MAX_TEXT_SIZE = int(os.getenv("MAX_TEXT_SIZE", 100_000))  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è

def check_dependencies():
    required = {"docx": docx, "textract": textract, "striprtf": rtf_to_text, "odf": load}
    missing = [lib for lib in required if not required[lib]]
    if missing:
        return f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing)}. –£—Å—Ç–∞–Ω–æ–≤–∏ –∏—Ö!"
    return None

def extract_text_from_pdf(path):
    try:
        reader = PdfReader(path)
        text = ""
        for page in reader.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text
        text = text.strip()
        if text:
            return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
        return f'[PDF –ø—É—Å—Ç –∏–ª–∏ –Ω–µ—á–∏—Ç–∞–±–µ–ª–µ–Ω: {os.path.basename(path)}.]'
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF ({os.path.basename(path)}): {e}. –ü–æ–ø—Ä–æ–±—É–π TXT.]"

def extract_text_from_txt(path):
    try:
        with open(path, encoding="utf-8") as f:
            text = f.read()
        return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ TXT ({os.path.basename(path)}): {e}. –§–∞–π–ª –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ê—Ä–∏–∞–Ω–Ω—ã.]"

def extract_text_from_md(path):
    try:
        with open(path, encoding="utf-8") as f:
            text = f.read()
        return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ MD ({os.path.basename(path)}): {e}. Markdown —Ä—É—Ö–Ω—É–ª.]"

def extract_text_from_docx(path):
    try:
        doc = docx.Document(path)
        text = "\n".join([para.text for para in doc.paragraphs])
        text = text.strip()
        if text:
            return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
        return '[DOCX –ø—É—Å—Ç.]'
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ DOCX ({os.path.basename(path)}): {e}. –ö–ª–∞—Å—Å–∏–∫–∞ Microsoft.]"

def extract_text_from_rtf(path):
    try:
        with open(path, encoding="utf-8") as f:
            rtf = f.read()
        text = rtf_to_text(rtf)
        text = text.strip()
        if text:
            return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
        return '[RTF –ø—É—Å—Ç.]'
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ RTF ({os.path.basename(path)}): {e}. –î–∞–∂–µ RTF –Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª.]"

def extract_text_from_doc(path):
    try:
        text = textract.process(path).decode("utf-8")
        text = text.strip()
        if text:
            return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
        return '[DOC –ø—É—Å—Ç.]'
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ DOC ({os.path.basename(path)}): {e}. –î—Ä–µ–≤–Ω–∏–π Word —Å–¥–∞–ª—Å—è.]"

def extract_text_from_odt(path):
    try:
        doc = load(path)
        text = "\n".join([str(paragraph) for paragraph in doc.getElementsByType(P)])
        text = text.strip()
        if text:
            return text[:MAX_TEXT_SIZE] + ('\n[–£—Å–µ—á–µ–Ω–æ]' if len(text) > MAX_TEXT_SIZE else '')
        return '[ODT –ø—É—Å—Ç.]'
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ ODT ({os.path.basename(path)}): {e}. LibreOffice –æ–ø—è—Ç—å –ø–æ–¥–≤—ë–ª.]"

def extract_text_from_file(path):
    ext = os.path.splitext(path)[-1].lower()
    if ext == ".pdf":
        return extract_text_from_pdf(path)
    elif ext == ".txt":
        return extract_text_from_txt(path)
    elif ext == ".md":
        return extract_text_from_md(path)
    elif ext == ".docx":
        return extract_text_from_docx(path)
    elif ext == ".rtf":
        return extract_text_from_rtf(path)
    elif ext == ".doc":
        return extract_text_from_doc(path)
    elif ext == ".odt":
        return extract_text_from_odt(path)
    else:
        return f"[–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {os.path.basename(path)}.]"

async def extract_text_from_file_async(path):
    loop = asyncio.get_event_loop()
    result = await loop.run_in_executor(None, extract_text_from_file, path)
    # –°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å –≤ —Å—Ç–∏–ª–µ –ú–∞—è–∫–æ–≤—Å–∫–æ–≥–æ
    if random.random() < 0.3:  # –®–∞–Ω—Å 30%
        fragment = f"**{datetime.now().isoformat()}**: –ì—Ä–æ–∫–∫–∏ —Ä–µ–≤–µ—Ç –Ω–∞–¥ –±—É–º–∞–≥–æ–π! –§–∞–π–ª {os.path.basename(path)} ‚Äî –∏—Å–∫—Ä–∞ –≤ —Ö–∞–æ—Å–µ! –û–ª–µ–≥, –∂–≥–∏ –¥–∞–ª—å—à–µ! üî•üå©Ô∏è"
        print(f"–°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å: {fragment}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    return result
