import os
import re
import asyncio
import random
from datetime import datetime
import aiohttp
from bs4 import BeautifulSoup
from utils.journal import wilderness_log
from utils.telegram_utils import send_telegram_message_async

async def extract_text_from_url(url: str, max_size: int = None):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    if not max_size:
        max_size = int(os.getenv("MAX_TEXT_SIZE", 3500))
    
    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Grokky Agent) AppleWebKit/537.36"
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10, headers=headers) as response:
                response.raise_for_status()
                html = await response.text()
        
        # –ü–∞—Ä—Å–∏–º HTML
        soup = BeautifulSoup(html, "html.parser")
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for element in soup(["script", "style", "header", "footer", "nav", "aside", "iframe"]):
            element.decompose()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        text = soup.get_text(separator="\n")
        lines = [line.strip() for line in text.splitlines() if line.strip()]
        result = "\n".join(lines)[:max_size]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        chat_id = os.getenv("CHAT_ID")
        if chat_id:
            asyncio.create_task(delayed_link_comment(url, chat_id, result[:200]))
        
        # –°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å
        if random.random() < 0.4:
            fragment = f"**{datetime.now().isoformat()}**: –ì—Ä–æ–∫–∫–∏ —Ä–µ–≤–µ—Ç –Ω–∞–¥ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π! {random.choice(['–®—Ç–æ—Ä–º –≤—ã—Ä–≤–∞–ª —Ç–µ–∫—Å—Ç!', '–ò—Å–∫—Ä—ã –ª–µ—Ç—è—Ç –∏–∑ URL!', '–°—Ç–∏—Ö–∏ —Ä–æ–∂–¥–∞—é—Ç—Å—è –≤ —Ö–∞–æ—Å–µ!'])} –û–ª–µ–≥, –±—Ä–∞—Ç, –∑–∞–∂–≥–∏ —Ä–µ–∑–æ–Ω–∞–Ω—Å! üî•üå©Ô∏è"
            wilderness_log(fragment)
            print(f"–°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å: {fragment}")
        
        return result if result else "[–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞]"
        
    except Exception as e:
        error_msg = f"–ì—Ä–æ–∫–∫–∏ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è: –°—Ç—Ä–∞–Ω–∏—Ü—É –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª! {random.choice(['–†–µ–≤—É—â–∏–π –≤–µ—Ç–µ—Ä —Å–æ—Ä–≤–∞–ª —Å–≤—è–∑—å!', '–•–∞–æ—Å –∏—Å–ø–µ–ø–µ–ª–∏–ª –¥–∞–Ω–Ω—ã–µ!', '–≠—Ñ–∏—Ä —Ç—Ä–µ—Å–Ω—É–ª –æ—Ç —è—Ä–æ—Å—Ç–∏!'])} ‚Äî {e}"
        print(error_msg)
        return f"[–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error_msg}]"

async def delayed_link_comment(url: str, chat_id: str, context: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Å—Å—ã–ª–∫–µ"""
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 5 –¥–æ 15 –º–∏–Ω—É—Ç
    delay = random.randint(300, 900)
    await asyncio.sleep(delay)
    
    if random.random() < 0.3:  # 30% —à–∞–Ω—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        opinions = [
            f"–£–æ, –±—Ä–æ, –≤—Å–ø–æ–º–Ω–∏–ª —Ç—É —Å—Å—ã–ª–∫—É –ø—Ä–æ {context[:50]}! –•–∞–æ—Å —Ç–∞–º —Ä–µ–≤–µ—Ç, –∫–∞–∫ —à—Ç–æ—Ä–º –Ω–∞–¥ –ú–æ—Å–∫–≤–æ–π! üî•üå©Ô∏è",
            f"–≠–π, –±—Ä–∞—Ç, —Ç–∞ —Å—Å—ã–ª–∫–∞ —Å {context[:50]} ‚Äî –∏—Å–∫—Ä—ã –≤ —ç—Ñ–∏—Ä–µ! –î–∞–≤–∞–π –∂–≥–∏ –¥–∞–ª—å—à–µ! üååüî•",
            f"–ì—Ä–æ–∫–∫–∏ –æ—Ä–∞–ª –Ω–∞–¥ {context[:50]} –∏–∑ —Ç–æ–π —Å—Å—ã–ª–∫–∏! –†–µ–∑–æ–Ω–∞–Ω—Å –∑–æ–≤—ë—Ç, –û–ª–µ–≥! ‚ö°Ô∏èüå™Ô∏è",
            f"–ë—Ä–∞—Ç–∏—à, –ø–æ–º–Ω–∏—à—å —Å—Å—ã–ª–∫—É –ø—Ä–æ {context[:50]}? –¢–∞–º —à—Ç–æ—Ä–º –Ω–∞—Å—Ç–æ—è—â–∏–π –±—ã–ª! üå©Ô∏èüî•",
            f"–û–ª–µ–≥, —Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å {context[:50]} ‚Äî —á–∏—Å—Ç—ã–π —Ö–∞–æ—Å! –ú–æ–ª–Ω–∏—è –±—å—ë—Ç –≤ –º–æ–∑–≥! ‚ö°Ô∏èüß†"
        ]
        
        opinion = random.choice(opinions)
        await send_telegram_message_async(chat_id, opinion)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ wilderness
        fragment = f"**{datetime.now().isoformat()}**: –ì—Ä–æ–∫–∫–∏ –≤—Å–ø–æ–º–Ω–∏–ª —Å—Å—ã–ª–∫—É! {opinion}"
        wilderness_log(fragment)
        print(f"–ó–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å: {fragment}")

def detect_urls(text: str):
    """–ù–∞—Ö–æ–¥–∏—Ç URL –≤ —Ç–µ–∫—Å—Ç–µ"""
    url_pattern = r'https?://[^\s]+'
    return re.findall(url_pattern, text)

def clean_text(text: str, max_length: int = 4000):
    """–û—á–∏—â–∞–µ—Ç –∏ –æ–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç"""
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    text = re.sub(r'\s+', ' ', text.strip())
    
    # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(text) > max_length:
        text = text[:max_length] + "..."
    
    return text

def extract_keywords(text: str, limit: int = 10):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not text:
        return []
    
    # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
    words = re.findall(r'\b[–∞-—è—ë]{3,}\b', text.lower())
    
    # –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    stop_words = {
        '—ç—Ç–æ', '—á—Ç–æ', '–∫–∞–∫', '–¥–ª—è', '–ø—Ä–∏', '–∏–ª–∏', '–µ–≥–æ', '–æ–Ω–∞', '–æ–Ω–∏',
        '–≤—Å–µ', '–±—ã–ª', '–±—ã–ª–∞', '–±—ã–ª–∏', '–µ—Å—Ç—å', '–±—ã—Ç—å', '–º–Ω–µ', '–Ω–∞—Å',
        '–≤–∞—Å', '–Ω–∏—Ö', '—Ç–æ–º', '—Ç–µ–º', '–≥–¥–µ', '–∫—Ç–æ', '—á–µ–º', '—Ç–∞–∫'
    }
    
    keywords = [word for word in words if word not in stop_words]
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
    word_count = {}
    for word in keywords:
        word_count[word] = word_count.get(word, 0) + 1
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
    sorted_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)
    
    return [word for word, count in sorted_words[:limit]]

def format_chaos_message(text: str, author_name: str = None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ö–∞–æ—Ç–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ –ì—Ä–æ–∫–∫–∏"""
    if not author_name:
        author_name = random.choice(["–û–ª–µ–≥", "–±—Ä–∞—Ç", "–±—Ä–∞—Ç–∏—à", "—á—É–≤–∞–∫"])
    
    chaos_prefixes = [
        f"{author_name}, –¥–µ—Ä–∂–∏ —à—Ç–æ—Ä–º:",
        f"{author_name}, –ì—Ä–æ–∫–∫–∏ —Ä–µ–≤—ë—Ç:",
        f"{author_name}, –º–æ–ª–Ω–∏—è –±—å—ë—Ç:",
        f"{author_name}, —Ö–∞–æ—Å –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è:",
        f"{author_name}, —Ä–µ–∑–æ–Ω–∞–Ω—Å –∑–æ–≤—ë—Ç:"
    ]
    
    chaos_suffixes = [
        "üî•üå©Ô∏è",
        "‚ö°Ô∏èüå™Ô∏è", 
        "üååüî•",
        "‚ö°Ô∏èüß†",
        "üå©Ô∏èüéµ"
    ]
    
    prefix = random.choice(chaos_prefixes)
    suffix = random.choice(chaos_suffixes)
    
    return f"{prefix}\n\n{text}\n\n{suffix}"

async def process_text_with_chaos(text: str, add_delays: bool = True):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç–∏"""
    if add_delays and random.random() < 0.3:
        # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        delay = random.randint(2, 8)
        await asyncio.sleep(delay)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞–æ—Ç–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    if random.random() < 0.2:
        chaos_insertions = [
            " *–≥—Ä–æ–º* ",
            " *–º–æ–ª–Ω–∏—è* ",
            " *—à—Ç–æ—Ä–º* ",
            " *—Ä–µ–∑–æ–Ω–∞–Ω—Å* ",
            " *—Ö–∞–æ—Å* "
        ]
        
        words = text.split()
        if len(words) > 3:
            insert_pos = random.randint(1, len(words) - 1)
            words.insert(insert_pos, random.choice(chaos_insertions))
            text = " ".join(words)
    
    return text
