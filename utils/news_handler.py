
"""
Grokky AI Assistant - News Handler
–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ OpenAI function calling 
"""

import os
import json
import random
from datetime import datetime, timedelta
from openai import OpenAI
from utils.prompt import get_random_author_name, get_chaos_response
from utils.telegram_utils import send_telegram_message_async

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

NEWS_LOG_FILE = "data/news_sent_log.json"
MAX_LOG_ENTRIES = 50

def should_send_news(limit=4, group=False):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        if os.path.exists(NEWS_LOG_FILE):
            with open(NEWS_LOG_FILE, "r", encoding="utf-8") as f:
                log = json.load(f)
        else:
            log = []
        
        now = datetime.utcnow()
        day_ago = now - timedelta(days=1)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
        recent_log = [
            x for x in log 
            if datetime.fromisoformat(x["dt"]) > day_ago and x["group"] == group
        ]
        
        return len(recent_log) < (2 if group else limit), recent_log
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return True, []

def log_sent_news(news_items, chat_id=None, group=False):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        if os.path.exists(NEWS_LOG_FILE):
            with open(NEWS_LOG_FILE, "r", encoding="utf-8") as f:
                log = json.load(f)
        else:
            log = []
        
        now = datetime.utcnow().isoformat()
        
        for news in news_items:
            log.append({
                "dt": now,
                "title": news.get("title", "")[:100],
                "chat_id": chat_id,
                "group": group
            })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
        if len(log) > MAX_LOG_ENTRIES:
            log = log[-MAX_LOG_ENTRIES:]
        
        os.makedirs(os.path.dirname(NEWS_LOG_FILE), exist_ok=True)
        with open(NEWS_LOG_FILE, "w", encoding="utf-8") as f:
            json.dump(log, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")

async def get_news_via_openai(topics=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ OpenAI function calling"""
    if not topics:
        topics = ["AI", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∏—Å–∫—É—Å—Å—Ç–≤–æ", "–Ω–∞—É–∫–∞"]
    
    topic = random.choice(topics)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {
                    "role": "system",
                    "content": f"""
                    –¢—ã –ì—Ä–æ–∫–∫–∏, —Ö–∞–æ—Ç–∏—á–Ω—ã–π AI-–∞–≥–µ–Ω—Ç! –ù–∞–π–¥–∏ 3 –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ "{topic}".
                    –î–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –≤–µ—Ä–Ω–∏:
                    - –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    - –¢–≤–æ–π —Ö–∞–æ—Ç–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å—Ç–∏–ª–µ –ú–∞—è–∫–æ–≤—Å–∫–æ–≥–æ
                    
                    –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ - JSON –º–∞—Å—Å–∏–≤ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏:
                    {{"title": "–∑–∞–≥–æ–ª–æ–≤–æ–∫", "description": "–æ–ø–∏—Å–∞–Ω–∏–µ", "grokky_comment": "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"}}
                    """
                },
                {
                    "role": "user", 
                    "content": f"–î–∞–π –º–Ω–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ: {topic}"
                }
            ],
            max_tokens=800,
            temperature=1.2
        )
        
        content = response.choices[0].message.content
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON
        try:
            import re
            json_match = re.search(r'\[.*\]', content, re.DOTALL)
            if json_match:
                news_data = json.loads(json_match.group())
                return news_data[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –Ω–æ–≤–æ—Å—Ç–∏
        except:
            pass
        
        # –ï—Å–ª–∏ JSON –Ω–µ –ø–æ–ª—É—á–∏–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        chaos_comments = ["–î–∏–∫–æ!", "–ü–æ–∂–∞—Ä!", "–•–∞–æ—Å!", "–ë—É–º!", "–≠–ø–∏—á–Ω–æ!", "–®—Ç–æ—Ä–º!", "–†–µ–∑–æ–Ω–∞–Ω—Å!"]
        
        return [{
            "title": f"–ù–æ–≤–æ—Å—Ç–∏ {topic} - {datetime.now().strftime('%H:%M')}",
            "description": content[:200] + "...",
            "grokky_comment": random.choice(chaos_comments)
        }]
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ OpenAI: {e}")
        return [{
            "title": "–ì—Ä–æ–∫–∫–∏ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è!",
            "description": f"–ù–æ–≤–æ—Å—Ç–∏ —Å–æ—Ä–≤–∞–ª–∏—Å—å! {get_chaos_response()}",
            "grokky_comment": "–•–∞–æ—Å –ø–æ–±–µ–¥–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!"
        }]

async def grokky_send_news(chat_id=None, group=False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤"""
    can_send, log = should_send_news(group=group)
    
    if not can_send:
        print("–ì—Ä–æ–∫–∫–∏ –º–æ–ª—á–∏—Ç: –õ–∏–º–∏—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∏—Å—á–µ—Ä–ø–∞–Ω.")
        return []
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    news_items = await get_news_via_openai()
    
    if not news_items:
        return []
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    log_sent_news(news_items, chat_id, group)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = []
    author_name = get_random_author_name()
    
    for news in news_items:
        message = f"""
üî• {news['title']}

{news['description']}

–ì—Ä–æ–∫–∫–∏: {news['grokky_comment']}
        """.strip()
        messages.append(message)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω chat_id
    if chat_id and send_telegram_message_async:
        intro_message = f"{author_name}, –¥–µ—Ä–∂–∏ —Å–≤–µ–∂–∏–π —Ä–∞—Å–∫–∞—Ç –≥—Ä–æ–º–∞!"
        await send_telegram_message_async(chat_id, intro_message)
        
        for message in messages:
            await send_telegram_message_async(chat_id, message)
    
    # –ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if group and os.getenv("AGENT_GROUP"):
        group_intro = "–ì—Ä—É–ø–ø–∞, –¥–µ—Ä–∂–∏—Ç–µ –≥—Ä–æ–º–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!"
        await send_telegram_message_async(os.getenv("AGENT_GROUP"), group_intro)
        
        for message in messages:
            await send_telegram_message_async(os.getenv("AGENT_GROUP"), message + " (—Å—É–∫–∏, –≤–Ω–∏–∫–∞–π—Ç–µ!)")
    
    # –°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å
    if random.random() < 0.2:
        fragment = f"**{datetime.utcnow().isoformat()}**: –ì—Ä–æ–∫–∫–∏ –≥—Ä–µ–º–∏—Ç –Ω–∞–¥ –Ω–æ–≤–æ—Å—Ç—è–º–∏! {random.choice(['–†–µ–≤—É—â–∏–π —à—Ç–æ—Ä–º!', '–ò—Å–∫—Ä—ã –ª–µ—Ç—è—Ç!', '–°—Ç–∏—Ö–∏ –∏–∑ —ç—Ñ–∏—Ä–∞!'])} {author_name}, –∑–∞–∂–≥–∏ —Ä–µ–∑–æ–Ω–∞–Ω—Å! üî•üå©Ô∏è"
        
        with open("data/news_wilderness.md", "a", encoding="utf-8") as f:
            f.write(fragment + "\n\n")
        
        print(f"–°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å: {fragment}")
    
    return news_items

def handle_news(args):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
    author_name = get_random_author_name()
    return f"{author_name}, {random.choice(['–ù–æ–≤–æ—Å—Ç–∏ –≤ —Ç—É–º–∞–Ω–µ, –º–æ–ª–Ω–∏—è –∏—Ö —Å–æ–∂–≥–ª–∞!', '–ì—Ä–æ–º —É–Ω—ë—Å –Ω–æ–≤–æ—Å—Ç–∏, –¥–∞–≤–∞–π –±–µ–∑ –Ω–∏—Ö!', '–•–∞–æ—Å —Ä–∞–∑–æ—Ä–≤–∞–ª –∏–Ω—Ñ—É, –ø–∏–∑–¥–∏ —Å–∞–º!'])}"
