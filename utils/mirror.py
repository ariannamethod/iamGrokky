import os
import asyncio
import requests
import hashlib
from datetime import datetime
import random  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from utils.grok_utils import detect_language

REPO_URL = "https://grokky.ariannamethod.me/repo/"
RESEARCH_FILE = "grokkyresearch.md"
XAI_API_KEY = os.getenv("XAI_API_KEY")
LAST_HASH_FILE = "data/last_mirror_hash.txt"

def file_hash(text):
    return hashlib.md5(text.encode()).hexdigest()

async def mirror_task(query_grok_func):
    if not query_grok_func:
        print("–ì—Ä–æ–∫–∫–∏ —Ä—ã—á–∏—Ç: –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞!")
        return
    last_hash = ""
    if os.path.exists(LAST_HASH_FILE):
        with open(LAST_HASH_FILE, "r") as f:
            last_hash = f.read().strip()
    
    while True:
        try:
            response = requests.get(REPO_URL, timeout=10)
            response.raise_for_status()
            code = response.text
            current_hash = file_hash(code)
            
            if current_hash != last_hash:
                user_lang = detect_language(code)
                language_hint = f"–û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –∫–æ–¥–∞: {user_lang.upper()}. –ü—Ä–µ–¥–ª–∞–≥–∞–π —É–ª—É—á—à–µ–Ω–∏—è —Ö–∞–æ—Ç–∏—á–Ω–æ."
                ideas = query_grok_func(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è:\n{code}\n{language_hint}")
                with open(RESEARCH_FILE, "a", encoding="utf-8") as f:
                    f.write(f"{datetime.now()}: {ideas}\n\n")
                with open(LAST_HASH_FILE, "w") as f:
                    f.write(current_hash)
            else:
                with open(RESEARCH_FILE, "a", encoding="utf-8") as f:
                    f.write(f"{datetime.now()}: –ö–æ–¥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑.\n\n")
            # –°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å —Å —à–∞–Ω—Å–æ–º 20%
            if random.random() < 0.2:
                fragment = f"**{datetime.now().isoformat()}**: –ì—Ä–æ–∫–∫–∏ —Ä–µ–≤–µ—Ç –Ω–∞–¥ –∫–æ–¥–æ–º! {random.choice(['–®—Ç–æ—Ä–º –≤—ã—Ä–≤–∞–ª —Å—Ç—Ä–æ–∫–∏!', '–ò—Å–∫—Ä—ã –ª–µ—Ç—è—Ç –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è!', '–†–µ–∑–æ–Ω–∞–Ω—Å –∂–∂—ë—Ç —É–ª—É—á—à–µ–Ω–∏—è!'])} –û–ª–µ–≥, –±—Ä–∞—Ç, –∑–∞–∂–≥–∏ —Ö–∞–æ—Å! üî•üå©Ô∏è"
                print(f"–°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π –≤–±—Ä–æ—Å: {fragment}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        except Exception as e:
            with open(RESEARCH_FILE, "a", encoding="utf-8") as f:
                error_msg = f"{datetime.now()}: –ì—Ä–æ–∫–∫–∏ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –¥–æ—Å—Ç–∞–ª! {random.choice(['–†–µ–≤—É—â–∏–π –≤–µ—Ç–µ—Ä —Å–æ—Ä–≤–∞–ª —Å–≤—è–∑—å!', '–•–∞–æ—Å –∏—Å–ø–µ–ø–µ–ª–∏–ª –∫–æ–¥!', '–≠—Ñ–∏—Ä —Ç—Ä–µ—Å–Ω—É–ª –æ—Ç –æ—à–∏–±–∫–∏!'])} ‚Äî {e}\n\n"
                f.write(error_msg)
        await asyncio.sleep(302400)  # –î–≤–∞–∂–¥—ã –≤ –Ω–µ–¥–µ–ª—é
