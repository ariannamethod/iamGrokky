#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ Grokky
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –±–µ–∑ OpenAI API
"""

import asyncio
import json
import os
from datetime import datetime

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
os.environ['OPENAI_API_KEY'] = 'test-key'
os.environ['CHAT_ID'] = 'test-chat-123'
os.environ['AGENT_GROUP'] = 'test-group-456'

class TestMemoryEngine:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏"""
    
    def __init__(self):
        self.user_threads = {}
        self.threads_file = "test_threads.json"
        
    async def get_or_create_thread(self, user_id: str):
        """–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è thread"""
        if user_id not in self.user_threads:
            thread_id = f"thread_{user_id}_{len(self.user_threads)}"
            self.user_threads[user_id] = thread_id
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π thread –¥–ª—è {user_id}: {thread_id}")
        else:
            print(f"‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π thread –¥–ª—è {user_id}: {self.user_threads[user_id]}")
        
        return self.user_threads[user_id]
    
    def _parse_message_metadata(self, content: str):
        """–ü–∞—Ä—Å–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        metadata = {
            "context_type": "unknown",
            "chat_id": None,
            "timestamp": None
        }
        
        # –ò—â–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [timestamp|context_type|chat_id]
        if content.startswith('['):
            try:
                end_bracket = content.find(']')
                if end_bracket > 0:
                    meta_str = content[1:end_bracket]
                    parts = meta_str.split('|')
                    if len(parts) >= 3:
                        metadata["timestamp"] = parts[0]
                        metadata["context_type"] = parts[1]
                        metadata["chat_id"] = parts[2] if parts[2] != 'unknown' else None
            except Exception:
                pass
        
        return metadata
    
    def format_message_with_metadata(self, user_id: str, message: str, chat_id: str = None, context_type: str = "unknown", author_name: str = None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        timestamp = datetime.now().isoformat()
        metadata_prefix = f"[{timestamp}|{context_type}|{chat_id or 'unknown'}]"
        
        if author_name:
            content = f"{metadata_prefix} {author_name}: {message}"
        else:
            content = f"{metadata_prefix} {message}"
            
        return content

async def test_unified_memory():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ Grokky")
    print("=" * 60)
    
    engine = TestMemoryEngine()
    
    # –¢–µ—Å—Ç 1: –ï–¥–∏–Ω—ã–π thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\nüìã –¢–ï–°–¢ 1: –ï–¥–∏–Ω—ã–π thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    user_id = "user_123"
    
    thread_1 = await engine.get_or_create_thread(user_id)
    thread_2 = await engine.get_or_create_thread(user_id)
    thread_3 = await engine.get_or_create_thread(user_id)
    
    print(f"Thread 1: {thread_1}")
    print(f"Thread 2: {thread_2}")  
    print(f"Thread 3: {thread_3}")
    
    if thread_1 == thread_2 == thread_3:
        print("‚úÖ –£–°–ü–ï–•: –í—Å–µ –≤—ã–∑–æ–≤—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–¥–∏–Ω thread_id")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê: Thread ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
    
    # –¢–µ—Å—Ç 2: –†–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ = —Ä–∞–∑–Ω—ã–µ threads
    print("\nüìã –¢–ï–°–¢ 2: –†–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Ä–∞–∑–Ω—ã–µ threads")
    user_a = "user_aaa"
    user_b = "user_bbb"
    
    thread_a = await engine.get_or_create_thread(user_a)
    thread_b = await engine.get_or_create_thread(user_b)
    
    print(f"Thread –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è A: {thread_a}")
    print(f"Thread –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è B: {thread_b}")
    
    if thread_a != thread_b:
        print("‚úÖ –£–°–ü–ï–•: –†–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Ä–∞–∑–Ω—ã–µ threads")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ threads")
    
    # –¢–µ—Å—Ç 3: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    print("\nüìã –¢–ï–°–¢ 3: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏")
    
    personal_msg = engine.format_message_with_metadata(
        user_id="user_123",
        message="–ü—Ä–∏–≤–µ—Ç –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞",
        chat_id="personal_chat_789",
        context_type="personal",
        author_name="–û–ª–µ–≥"
    )
    
    group_msg = engine.format_message_with_metadata(
        user_id="user_123", 
        message="–û–±—Å—É–∂–¥–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ",
        chat_id="group_chat_456",
        context_type="group",
        author_name="–û–ª–µ–≥"
    )
    
    print(f"–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {personal_msg}")
    print(f"–ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {group_msg}")
    
    # –¢–µ—Å—Ç 4: –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    print("\nüìã –¢–ï–°–¢ 4: –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    personal_meta = engine._parse_message_metadata(personal_msg)
    group_meta = engine._parse_message_metadata(group_msg)
    
    print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ª–∏—á–Ω–æ–≥–æ: {personal_meta}")
    print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ: {group_meta}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞
    if (personal_meta["context_type"] == "personal" and 
        group_meta["context_type"] == "group" and
        personal_meta["chat_id"] == "personal_chat_789" and
        group_meta["chat_id"] == "group_chat_456"):
        print("‚úÖ –£–°–ü–ï–•: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å—è—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    
    # –¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    print("\nüìã –¢–ï–°–¢ 5: –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è")
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤ –ª–∏—á–∫—É, –ø–æ—Ç–æ–º –≤ –≥—Ä—É–ø–ø—É, –ø–æ—Ç–æ–º —Å–Ω–æ–≤–∞ –≤ –ª–∏—á–∫—É")
    
    user_id = "real_user"
    
    # –°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
    messages = [
        ("–ö–∞–∫ –¥–µ–ª–∞?", "personal_chat", "personal"),
        ("–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º –≤ –≥—Ä—É–ø–ø–µ!", "group_chat", "group"), 
        ("–ß—Ç–æ —è —Å–ø—Ä–æ—Å–∏–ª —Ç–µ–±—è –≤ –≥—Ä—É–ø–ø–µ?", "personal_chat", "personal"),
        ("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ", "group_chat", "group")
    ]
    
    # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞—Å—Ç—å –≤ –æ–¥–∏–Ω thread
    thread_id = await engine.get_or_create_thread(user_id)
    print(f"Thread –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {thread_id}")
    
    formatted_messages = []
    for msg, chat_id, context_type in messages:
        formatted = engine.format_message_with_metadata(
            user_id=user_id,
            message=msg,
            chat_id=chat_id,
            context_type=context_type,
            author_name="–û–ª–µ–≥"
        )
        formatted_messages.append(formatted)
        print(f"  {context_type}: {msg}")
    
    print(f"\n‚úÖ –í—Å–µ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ thread {thread_id}")
    print("‚úÖ –¢–µ–ø–µ—Ä—å Grokky –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞!")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üéØ –ò–¢–û–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –ü–ê–ú–Ø–¢–ò:")
    print("‚úÖ 1. –ï–¥–∏–Ω—ã–π thread –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç chat_id)")
    print("‚úÖ 2. –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    print("‚úÖ 3. –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –≤—Å–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("‚úÖ 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API")
    print("‚úÖ 5. –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å user_id")
    print("\nüöÄ –¢–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏—Ç –≤ –ª–∏—á–∫–µ '—á—Ç–æ —è —Å–ø—Ä–æ—Å–∏–ª –≤ –≥—Ä—É–ø–ø–µ' -")
    print("   Grokky –Ω–∞–π–¥–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω–æ–π –ø–∞–º—è—Ç–∏!")

if __name__ == "__main__":
    asyncio.run(test_unified_memory())
